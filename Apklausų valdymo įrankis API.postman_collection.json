{
	"info": {
		"_postman_id": "081bbf44-87ab-44e2-a17d-cc64154ec71f",
		"name": "Apklausų valdymo įrankis API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32622777"
	},
	"item": [
		{
			"name": "User info - admin",
			"item": [
				{
					"name": "user/current + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Teisingi duomenys:\r",
									"pm.test(\"4. Atvaizduojami teisingi vartotojo duomenys.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"\r",
									"    let expectedUserName = pm.variables.get(\"AdminName\");\r",
									"    let expectedEmail = pm.variables.get(\"AdminElP\");\r",
									"    \r",
									"    pm.expect(responseData.name).to.eql(expectedUserName);\r",
									"    pm.expect(responseData.email).to.be.eql(expectedEmail);\r",
									"    pm.expect(responseData.role).to.be.eql(\"admin\");\r",
									"});\r",
									"//Išsaugomas admin'o user ID reikalingas kitiems testams:\r",
									"pm.test(\"5. Admin vartotojo ID išsaugomas į global kintamąjį 'adminId'.\", function () {\r",
									"    let jsonData = pm.response.json(); // Gauname JSON formatu atsakymą iš API\r",
									"    let expectedUserId = jsonData.data.user._id; // Ištraukiame vartotojo ID\r",
									"\r",
									"    // Patikriname, ar gautas ID yra validus\r",
									"    pm.expect(expectedUserId, \"User ID should be present in the response\").to.be.ok;\r",
									"\r",
									"    // Išsaugome gautą ID į globalų kintamąjį \"adminUserId\"\r",
									"    pm.globals.set(\"adminId\", expectedUserId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/all + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gera duomenų struktūra: pagal sita pavizdi\r",
									"pm.test(\"4. Atsakymo struktūra yra teisinga, visi vartotojai turi privalomus raktus.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.keys(\"status\", \"results\", \"data\");\r",
									"    pm.expect(jsonData.data).to.have.property(\"users\").to.be.an('array');\r",
									"    jsonData.data.users.forEach(user => {\r",
									"        pm.expect(user).to.have.all.keys(\"_id\", \"name\", \"office365\", \"email\", \"role\", \"__v\");\r",
									"    });\r",
									"});\r",
									"//Teisingas atvaizuojamų vartotojų skaičius:\r",
									"pm.test(\"5. Teisingas grąžintų naudotojų skaičius.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.users.length).to.eql(jsonData.results);\r",
									"});\r",
									"// Tikrinti vartotojo duomenis pagal vardą ir išsaugoti jo ID į global kintamuosius:\r",
									"pm.test(\"6. Rastas rolių testavimui naudojamas vartotojas pagal kintamąjį 'EmployeeName' ir jo ID išsaugotas į kintamąjį 'employeeId'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    const expectedUserName = pm.collectionVariables.get(\"EmployeeName\"); // Gaunama kintamojo reikšmė\r",
									"    const user = jsonData.data.users.find(u => u.name === expectedUserName); // Panaudojama kintamojo reikšmė\r",
									"    pm.expect(user.name).to.eql(expectedUserName); // Tikrinama su kintamojo reikšme\r",
									"    // Išsaugoti vartotojo ID į global variable\r",
									"    pm.globals.set(\"employeeId\", user._id);\r",
									"});\r",
									"//Tikrinti pirmo vartotojo (Gedimino) duomenis ir jo ID išsaugomas į kolekcijos kintamuosius:\r",
									"pm.test(\"7. Tikrinami vartotojo duomenys pagal kintamuosius 'AdditionalUserName' ir 'AdditionalUserElP'. Vartotojo ID išsaugotas į kintamąjį 'additionalUserId'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let expectedUserName = pm.collectionVariables.get(\"AdditionalUserName\"); // Gaunama kintamojo reikšmė\r",
									"    let expectedUserElP = pm.collectionVariables.get(\"AdditionalUserElP\"); // Gaunama kintamojo reikšmė\r",
									"    const user = jsonData.data.users.find(u => u.email === expectedUserElP);\r",
									"    pm.expect(user.name).to.eql(expectedUserName);\r",
									"    pm.expect(user.role).to.oneOf([\"admin\", \"employee\", \"user\"]);\r",
									"        // Išsaugoti vartotojo ID į global variable\r",
									"    pm.globals.set(\"additionalUserId\", user._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkami duomenys:\r",
									"pm.test(\"4. Teisingi išfiltruoto vartotojo duomenys pagal kintamąjį 'additionalUserId'.\", function () {\r",
									"    var responseData = pm.response.json().data.user;\r",
									"    let expectedUserName = pm.collectionVariables.get(\"AdditionalUserName\"); // Gaunama kintamojo reikšmė\r",
									"    let expectedUserElP = pm.collectionVariables.get(\"AdditionalUserElP\"); // Gaunama kintamojo reikšmė\r",
									"    let expectedUserId = pm.globals.get(\"additionalUserId\"); // Gaunama kintamojo reikšmė\r",
									"    pm.expect(responseData._id).to.eql(expectedUserId);\r",
									"    pm.expect(responseData.name).to.eql(expectedUserName);\r",
									"    pm.expect(responseData.email).to.eql(expectedUserElP);\r",
									"    pm.expect(responseData.role).to.be.oneOf([\"admin\", \"employee\",\"user\"]);\r",
									"});\r",
									"//Gera duomenų struktūra:\r",
									"pm.test(\"5. Atsakyme pateikiame visi reikalingi raktai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"status\").that.is.a(\"string\");\r",
									"    pm.expect(responseData).to.have.property(\"data\").that.is.an(\"object\");\r",
									"    pm.expect(responseData.data).to.have.property(\"user\").that.is.an(\"object\");\r",
									"    pm.expect(responseData.data.user).to.have.all.keys(\"_id\", \"name\", \"office365\", \"email\", \"role\", \"__v\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{additionalUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - bad ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Non-existent user'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - invalid ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found'.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "000000000000000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - invalid ID 2 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found'.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "ffffffffffffffffffffffff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - special MongoDB value ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Non-existent user'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "$oid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - too long ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Non-existent user'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "66353aaebc8b43eadcbb5acaaaaaaaaaaaaaaaaaaaaaaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - ID # (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "#"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - ID % (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - ID ? (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "?"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - ID \\ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "\\"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/all - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "badToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/all - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra mažesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/current - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "badToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/current - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra mažesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI2NjFjMzg0MmFhOTQ4N2YxNWEzMzZmOGMiLCJpYXQiOjE3MTMyNTc1NDl9.8wyV_VzR8qNnsAmJEjFNv5BMm7S5rFofYkbO-VJFEY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{additionalUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{additionalUserId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Change user's role - admin",
			"item": [
				{
					"name": "user/:id/role -> admin + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tinkama vartotojo vardo ir rolės atnaujinimo patikra\r",
									"pm.test(\"4. Vartotojo 'EmployeeName' rolė atnaujinta į 'admin'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    let expectedName = pm.collectionVariables.get(\"EmployeeName\");\r",
									"    pm.expect(responseData.name).to.eql(expectedName);\r",
									"    pm.expect(responseData.role).to.eql(\"admin\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"5. Tinkamas pranešimas apie vartotojo rolės pasikeitimą 'Role has been changed'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Role has been changed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> employee + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tinkama vartotojo vardo ir rolės atnaujinimo patikra\r",
									"pm.test(\"4. Vartotojo 'EmployeeName' rolė atnaujinta į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    let expectedName = pm.collectionVariables.get(\"EmployeeName\");\r",
									"    pm.expect(responseData.name).to.eql(expectedName);\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"5. Tinkamas pranešimas apie vartotojo rolės pasikeitimą 'Role has been changed'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Role has been changed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> user + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tinkama vartotojo vardo ir rolės atnaujinimo patikra\r",
									"pm.test(\"4. Vartotojo 'EmployeeName' rolė atnaujinta į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    let expectedName = pm.collectionVariables.get(\"EmployeeName\");\r",
									"    pm.expect(responseData.name).to.eql(expectedName);\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"5. Tinkamas pranešimas apie vartotojo rolės pasikeitimą 'Role has been changed'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Role has been changed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> bad role - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Validation failed: role: '' is not a valid enum value for path `role`'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Validation failed: role:\");\r",
									"    pm.expect(responseData.data.message).to.include(\"is not a valid enum value for path `role`.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": \"superuser\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> empty - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide desired role\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> invalid JSON format - (as admin) !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid JSON format'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Invalid JSON format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": 123,\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> bad type - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide desired role\"); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> bad type 2 - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide desired role\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": {\"type\": \"admin\"}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> {} - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide desired role\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> operator injection - (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Reqest'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide desired role\");  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"role\": {\"$ne\": \"\"}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> user - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -> user - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Change user's role - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    var responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -! (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{additionalUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:id/role -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{additionalUserId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User info - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    var responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/current + (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Geras vartotojas:\r",
									"pm.test(\"4. Atsakyme matomas vartotojo vardas atitinka priskirtą kolekcijos kintamąjį 'EmployeeName'.\", function () {\r",
									"    let responseJson = pm.response.json();\r",
									"    let actualUserName = responseJson.data.user.name;\r",
									"    let expectedUserName = pm.variables.get(\"EmployeeName\");\r",
									"\r",
									"    pm.expect(actualUserName).to.eql(expectedUserName, \"The user name in the response should match the expected user name stored in the collection variable.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/all -! (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID -! (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "66139cb3d97aae974bd0d98b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/current + (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Geras vartotojas:\r",
									"pm.test(\"4. Atsakyme matomas vartotojo vardas atitinka priskirtą kolekcijos kintamąjį 'EmployeeName'.\", function () {\r",
									"    let responseJson = pm.response.json();\r",
									"    let actualUserName = responseJson.data.user.name;\r",
									"    let expectedUserName = pm.variables.get(\"EmployeeName\");\r",
									"\r",
									"    pm.expect(actualUserName).to.eql(expectedUserName, \"The user name in the response should match the expected user name stored in the collection variable.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/all -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "user/:userID -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/user/:userID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":userID"
							],
							"variable": [
								{
									"key": "userID",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Info about surveys - admin",
			"item": [
				{
					"name": "surveys/all + limit=50 (as admin) {{randomSurveyId}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Tikriniama Apklausos būsena, isEmbeddable logika, Vartotojo vardas, Apklausos updated laikas lygus arba vėlesnis nei created\r",
									"pm.test(\"5. Apklausos duomenys yra korektiški, atitinka nustatytą logiką..\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let surveys = jsonData.data.surveyData;\r",
									"\r",
									"    surveys.forEach(survey => {\r",
									"        // Tikrinama, ar apklausos būsena yra vienas iš leidžiamų variantų\r",
									"        pm.expect(['new', 'active', 'closed'], \"Apklausos būsena yra netinkama\").to.include(survey.state);\r",
									"\r",
									"        // Tikrinama, ar isEmbeddable yra boolean reikšmė ir logika su submittedAnswers ir respondents\r",
									"        pm.expect([true, false], \"isEmbeddable reikšmė netinkama\").to.include(survey.isEmbeddable);\r",
									"        if (!survey.isEmbeddable) {\r",
									"            pm.expect(survey.submittedAnswers, \"Pateiktų atsakymų skaičius neturėtų viršyti respondentų skaičiaus\").to.be.at.most(survey.respondents);\r",
									"        }\r",
									"\r",
									"        // Tikrinama, ar vartotojo vardas yra sudarytas iš dviejų žodžių ir yra tik raidės\r",
									"        let nameParts = survey.user.trim().split(/\\s+/);\r",
									"        pm.expect(nameParts.length, \"Vartotojo vardas turėtų būti sudarytas iš dviejų žodžių\").to.eql(2);\r",
									"        nameParts.forEach(part => {\r",
									"            pm.expect(part, `Vartotojo vardo dalis '${part}' turėtų būti sudaryta tik iš raidžių`).to.match(/^[a-zA-ZąčęėįšųūžĄČĘĖĮŠŲŪŽ]+$/);\r",
									"        });\r",
									"\r",
									"        // Tikrinama, ar updatedAt nėra ankstesnė už createdAt\r",
									"        let createdAt = new Date(survey.createdAt);\r",
									"        let updatedAt = new Date(survey.updatedAt);\r",
									"        pm.expect(updatedAt.getTime(), \"UpdatedAt laikas turėtų būti lygus ar vėlesnis nei CreatedAt laikas\").to.be.at.least(createdAt.getTime());\r",
									"    });\r",
									"});\r",
									"//Tinkamai apskaičiuojami rezultatai:\r",
									"pm.test(\"6. Atvaizduojamų apklausų kiekis atitinka 'results' rakto reikšmę.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.surveyData.length).to.eql(jsonData.results);\r",
									"});\r",
									"//Apklausos nesidubliuoja:\r",
									"pm.test(\"7. Apklausų ID yra unikalūs.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let ids = jsonData.data.surveyData.map(s => s._id);\r",
									"    let uniqueIds = [...new Set(ids)];\r",
									"    pm.expect(ids.length).to.eql(uniqueIds.length);\r",
									"});\r",
									"//Pasiemame atsitiktinį surveyID, kurio kūrėjas nėra 'employeeId', ir išsisaugome vėlesniems testams:\r",
									"pm.test(\"8. Išsaugomas atsitiktinės apklausos ID, kurios kūrėjas nėra 'EmployeeName'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let surveys = jsonData.data.surveyData;\r",
									"    let employeeName = pm.collectionVariables.get(\"EmployeeName\");\r",
									"\r",
									"    // Filtravimas apklausų, kurios neturi dabartinio vartotojo kūrėjo pagal vardą:\r",
									"    let filteredSurveys = surveys.filter(survey => survey.user !== employeeName);\r",
									"\r",
									"    // Patikriname, ar filtruotas sąrašas nėra tuščias\r",
									"    pm.expect(filteredSurveys.length, \"Filtruotas apklausų sąrašas neturėtų būti tuščias\").to.be.above(0);\r",
									"\r",
									"    if (filteredSurveys.length > 0) {\r",
									"        // Pasirinkite atsitiktinę apklausą iš filtruoto sąrašo\r",
									"        let randomIndex = Math.floor(Math.random() * filteredSurveys.length);\r",
									"        let randomSurveyId = filteredSurveys[randomIndex]._id;\r",
									"\r",
									"        // Išsaugokite _id į Postman global kintamąjį\r",
									"        pm.globals.set(\"randomSurveyId\", randomSurveyId);\r",
									"\r",
									"        // Patikriname, ar _id išsaugotas teisingai\r",
									"        pm.expect(pm.globals.get(\"randomSurveyId\"), \"Įrašytas 'randomSurveyId' turėtų atitikti pasirinktą _id\").to.eql(randomSurveyId);\r",
									"    }\r",
									"});\r",
									"// Puslapiavimo struktūros patikrinimas\r",
									"pm.test(\"9. Puslapiavimo struktūra yra tinkama, atvaizduoti visi reikalingi raktai ir teisingos reikšmės.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra 1\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 1\").to.eql(1);\r",
									"\r",
									"    // Patikriname, ar 'limit' reikšmė yra 50\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti 50\").to.eql(50);\r",
									"});\r",
									"// 'results' ir 'limit' reikšmių bei 'surveyData' masyvo ilgio patikrinimas\r",
									"pm.test(\"10. 'results' reikšmė yra lygi 'limit' reikšmei ir 'surveyData' masyvo ilgis yra teisingas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let results = responseData.results;\r",
									"    let limit = responseData.data.pagination.limit;\r",
									"    let surveyDataLength = responseData.data.surveyData.length;\r",
									"\r",
									"    // Patikriname, ar 'results' reikšmė yra lygi 'limit' reikšmei\r",
									"    pm.expect(results, \"'results' reikšmė turėtų būti lygi 'limit' reikšmei\").to.eql(limit);\r",
									"\r",
									"    // Patikriname, ar 'surveyData' masyvo ilgis atitinka 'results' reikšmę\r",
									"    pm.expect(surveyDataLength, \"'surveyData' masyvo ilgis turėtų atitikti 'results' reikšmę\").to.eql(results);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - limit 1000 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar 'limit' reikšmė nustatoma į 50, kai viršijamas maksimalus limitas\r",
									"pm.test(\"5. 'limit' reikšmė nustatoma į 50, kai viršijamas maksimalus limitas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra 1\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 1\").to.eql(1);\r",
									"\r",
									"    // Patikriname, ar 'limit' reikšmė yra 50, kai viršijamas maksimalus limitas\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti 50, kai viršijamas maksimalus limitas\").to.eql(50);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=1000&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "1000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - page 1000 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar 'page' reikšmė nustatoma į 1000, kai užklausoje pateikiamas didelis puslapio numeris, ir grąžinamas tuščias 'surveyData' masyvas\r",
									"pm.test(\"5. Tuščias 'surveyData' masyvas ir teisinga puslapiavimo informacija, kai 'page' reikšmė yra didelė.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra 1000\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 1000\").to.eql(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=10&page=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -  limit & page negative values (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Puslapiavime imama absoliuti reikšmė, kai limitas ir puslapis yra neigiami skaičiai\r",
									"pm.test(\"5. Puslapiavime imama absoliuti reikšmė, kai limitas ir puslapis yra neigiami skaičiai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar 'limit' reikšmė yra absoliuti 10\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti 10\").to.eql(10);\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra absoliuti 5\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 5\").to.eql(5);\r",
									"\r",
									"    // Patikriname, ar 'surveyData' masyvo ilgis yra teisingas pagal 'limit'\r",
									"    let surveyDataLength = responseData.data.surveyData.length;\r",
									"    pm.expect(surveyDataLength, \"'surveyData' masyvo ilgis turėtų būti mažiau arba lygu 'limit' reikšmei\").to.be.at.most(pagination.limit);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=-10&page=-5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "-10"
								},
								{
									"key": "page",
									"value": "-5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -   limit & page = 0 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Numatyti parametrai, kai 'limit' ir 'page' yra 0\r",
									"pm.test(\"5. Grąžinami numatyti parametrai , kai 'limit' ir 'page' reikšmės yra 0.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar grąžintos numatytosios reikšmės\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti numatyta reikšmė 1\").to.eql(1);\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti numatyta reikšmė 10\").to.eql(10);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=0&page=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "page",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -  limit & page = symbols (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Numatyti parametrai, kai 'limit' ir 'page' yra netinkamos reikšmės\r",
									"pm.test(\"5. Grąžinami numatyti parametrai , kai 'limit' ir 'page' reikšmės yra netinkamos.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar grąžintos numatytosios reikšmės\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti numatyta reikšmė 1\").to.eql(1);\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti numatyta reikšmė 10\").to.eql(10);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=?&page=%",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "?"
								},
								{
									"key": "page",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -  limit & page bad type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar numatytosios reikšmės grąžinamos, kai 'limit' ir 'page' reikšmės yra netinkamos\r",
									"pm.test(\"5. Numatyti parametrai grąžinami, kai 'limit' ir 'page' reikšmės yra netinkamos.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar grąžintos numatytosios reikšmės\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti numatyta reikšmė 1\").to.eql(1);\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti numatyta reikšmė 10\").to.eql(10);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=two&page=twenty",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "two"
								},
								{
									"key": "page",
									"value": "twenty"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -   limit & page with many 0  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar teisingos reikšmės grąžinamos, kai 'limit' ir 'page' pateikiami su nereikalingais nuliais\r",
									"pm.test(\"5. Teisingos reikšmės grąžinamos, kai 'limit' ir 'page' pateikiami su nereikalingais nuliais.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra 2\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 2\").to.eql(2);\r",
									"\r",
									"    // Patikriname, ar 'limit' reikšmė yra 20\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti 20\").to.eql(20);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=00000000000000000020&page=00000000000000000002",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "00000000000000000020"
								},
								{
									"key": "page",
									"value": "00000000000000000002"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - empty params (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar numatytosios reikšmės grąžinamos, kai 'limit' ir 'page' yra tušti\r",
									"pm.test(\"5. Numatyti parametrai grąžinami, kai 'limit' ir 'page' reikšmės yra tuščios.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"\r",
									"    // Patikriname, ar yra puslapiavimo raktas\r",
									"    pm.expect(pagination).to.be.an(\"object\", \"Puslapiavimo raktas turėtų būti objektas\");\r",
									"\r",
									"    // Patikriname, ar puslapiavimo struktūroje yra reikalingi raktai\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination).to.have.property(\"page\");\r",
									"    pm.expect(pagination).to.have.property(\"limit\");\r",
									"    pm.expect(pagination).to.have.property(\"pages\");\r",
									"\r",
									"    // Patikriname, ar grąžintos numatytosios reikšmės\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti numatyta reikšmė 1\").to.eql(1);\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti numatyta reikšmė 10\").to.eql(10);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=&page=&name=&state=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": ""
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "state",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all + state = new (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar visi 'surveyData' elementai turi 'state' reikšmę 'new'\r",
									"pm.test(\"5. Visi 'surveyData' elementai turi 'state' reikšmę 'new'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveyData;\r",
									"\r",
									"    // Patikriname, ar kiekvieno apklausos 'state' yra 'new'\r",
									"    surveys.forEach(survey => {\r",
									"        pm.expect(survey.state, \"Apklausos 'state' reikšmė turėtų būti 'new'\").to.eql(\"new\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?state=new",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "state",
									"value": "new"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all + state = active (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar visi 'surveyData' elementai turi 'state' reikšmę 'active'\r",
									"pm.test(\"5. Visi 'surveyData' elementai turi 'state' reikšmę 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveyData;\r",
									"\r",
									"    // Patikriname, ar kiekvieno apklausos 'state' yra 'active'\r",
									"    surveys.forEach(survey => {\r",
									"        pm.expect(survey.state, \"Apklausos 'state' reikšmė turėtų būti 'active'\").to.eql(\"active\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?state=active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "state",
									"value": "active"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all + state = closed (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar visi 'surveyData' elementai turi 'state' reikšmę 'closed'\r",
									"pm.test(\"5. Visi 'surveyData' elementai turi 'state' reikšmę 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveyData;\r",
									"\r",
									"    // Patikriname, ar kiekvieno apklausos 'state' yra 'closed'\r",
									"    surveys.forEach(survey => {\r",
									"        pm.expect(survey.state, \"Apklausos 'state' reikšmė turėtų būti 'closed'\").to.eql(\"closed\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?state=closed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "state",
									"value": "closed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - invalid state (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar API grąžina tuščią masyvą ir teisingas reikšmes, kai 'state' yra netinkamas\r",
									"pm.test(\"6. Tuščias masyvas ir teisingos reikšmės, kai 'state' parametras yra netinkamas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let pagination = responseData.data.pagination;\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"\r",
									"    // Patikriname, ar 'surveyData' masyvas yra tuščias\r",
									"    pm.expect(surveyData, \"'surveyData' masyvas turėtų būti tuščias\").to.be.an('array').that.is.empty;\r",
									"\r",
									"    // Patikriname, ar 'results' reikšmė yra 0\r",
									"    pm.expect(responseData.results, \"'results' reikšmė turėtų būti 0\").to.eql(0);\r",
									"\r",
									"    // Patikriname, ar 'total' reikšmė yra 0\r",
									"    pm.expect(pagination.total, \"'total' reikšmė turėtų būti 0\").to.eql(0);\r",
									"\r",
									"    // Patikriname, ar 'pages' reikšmė yra 0\r",
									"    pm.expect(pagination.pages, \"'pages' reikšmė turėtų būti 0\").to.eql(0);\r",
									"\r",
									"    // Patikriname, ar 'page' reikšmė yra 1\r",
									"    pm.expect(pagination.page, \"'page' reikšmė turėtų būti 1\").to.eql(1);\r",
									"\r",
									"    // Patikriname, ar 'limit' reikšmė yra 15\r",
									"    pm.expect(pagination.limit, \"'limit' reikšmė turėtų būti 15\").to.eql(10);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?state=InvalidState",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "state",
									"value": "InvalidState"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all + name = Darbo aplinkos (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"All surveys found\");\r",
									"});\r",
									"// Patikrinimas, ar kiekvienos apklausos 'name' lauke yra randamas filtravimo kriterijus 'Darbo aplinkos'\r",
									"pm.test(\"5. Kiekvienos apklausos 'name' lauke yra randamas filtravimo kriterijus 'Darbo aplinkos'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveyData;\r",
									"\r",
									"    surveys.forEach(survey => {\r",
									"        pm.expect(survey.name, \"'name' turėtų turėti 'Darbo aplinkos'\").to.include(\"Darbo aplinkos\");\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?name=Darbo aplinkos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "limit",
									"value": "15",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "name",
									"value": "Darbo aplinkos"
								},
								{
									"key": "state",
									"value": "closed",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine + (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Teisingas grąžinamų rezultatų skaičius:\r",
									"pm.test(\"4. Atvaizduojamų apklausų kiekis atitinka 'results' rakto reikšmę.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results).to.equal(jsonData.data.surveyData.length);\r",
									"});\r",
									"\r",
									"//Kai vartotojas neturi skūręs apklausų, tikrinama žinutė:\r",
									"pm.test(\"5. Kai vartotojas neturi sukurtų apklausų, 'surveyData' raktas yra tuščias masyvas.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.results === 0) {\r",
									"        pm.expect(jsonData.data.message).to.eql(\"Current user surveys found\");\r",
									"        pm.expect(jsonData.data.surveyData).to.be.an(\"array\").that.is.empty;\r",
									"    }\r",
									"});\r",
									"// Tikrinama ar apklausos priklauso dabartiniam vartotojui, jei jų yra:\r",
									"pm.test(\"6. Grąžintos apklausos priklauso vartotojui 'AdminName'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.user).to.eql(pm.collectionVariables.get(\"AdminName\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID + (as admin) {{randomSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tikrinama, ar žinutės laukas yra teisingas:\r",
									"pm.test(\"4. Žinutės lauko reikšmė yra teisinga: 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\", \"The response message should be 'Survey found'.\");\r",
									"});\r",
									"// Tikrinama, ar '_id' atitinka kintamąjį:???? nereikalingas nes jei sita salyga netenkinama neveiks visi testai su randomSurveyId\r",
									"pm.test(\"5. Apklausos '_id' atitinka kintamąjį 'randomSurveyId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedId = pm.variables.get(\"randomSurveyId\"); // Užtikrinti, kad kintamasis 'randomSurveyId' yra iš anksto nustatytas Postman aplinkoje\r",
									"    pm.expect(responseData.data.surveyData._id).to.eql(expectedId, \"The survey ID should match the provided variable value.\");\r",
									"});\r",
									"// Gera apklausų struktūra ir minimalūs reikalavimai klausimams\r",
									"pm.test(\"6. Apklausos duomenys atitinka reikalavimus: kiekvienas klausimas pagal savo tipą turi reikiamus atsakymų variantus.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let survey = jsonData.data.surveyData; // Tikrinama tik viena konkreti apklausa pagal ID\r",
									"\r",
									"    // Tikriname, ar apklausa turi bent vieną klausimą\r",
									"    pm.expect(survey.questions, \"Apklausa turi turėti bent vieną klausimą\").to.not.be.empty;\r",
									"\r",
									"    survey.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property(\"label\");\r",
									"        pm.expect(question).to.have.property(\"type\");\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"\r",
									"        // Tikriname, kad radio ir checkbox tipo klausimai turi bent vieną atsakymą\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question.options, \"Radio ir checkbox tipo klausimai privalo turėti bent vieną atsakymą\").to.be.an(\"array\").that.is.not.empty;\r",
									"        }\r",
									"\r",
									"        // Tikriname, kad text ir textarea tipo klausimai neturi 'options' savybės arba ji yra tuščia\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            if (question.hasOwnProperty('options')) {\r",
									"                pm.expect(question.options, \"Text ir textarea tipo klausimai neturėtų turėti 'options' savybės arba ji turi būti tuščia\").to.be.empty;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - bad ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - invalid ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Item not found.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.include(\"Item with\");\r",
									"    pm.expect(jsonData.data.message).to.include(\" not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "000000000000000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - invalid ID 2 (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Item not found.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.include(\"Item with\");\r",
									"    pm.expect(jsonData.data.message).to.include(\" not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "ffffffffffffffffffffffff"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - special MongoDB value ID (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "$oid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - ID # (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "#"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - ID % (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - ID ? (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "?"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - ID \\ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "\\"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");;\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Teisingas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "?",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Info about surveys - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    var responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -! (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden.'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine + (as empl) {{randomSurveyIdEmployee}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Teisingas grąžinamų rezultatų skaičius:\r",
									"pm.test(\"5. Atvaizduojamų apklausų kiekis atitinka 'results' rakto reikšmę.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.results).to.equal(jsonData.data.surveyData.length);\r",
									"});\r",
									"// Kai vartotojas neturi skūręs apklausų, tikrinama žinutė:\r",
									"pm.test(\"6.Kai vartotojas neturi sukurtų apklausų, 'surveyData' raktas yra tuščias masyvas.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    if (jsonData.results === 0) {\r",
									"        pm.expect(jsonData.data.surveyData).to.be.an(\"array\").that.is.empty;\r",
									"        pm.expect(jsonData.data.message).to.eql(\"Current user surveys found\");\r",
									"    }\r",
									"});\r",
									"// Tikrinama ar apklausos priklauso employee vartotojui, jei jų yra:\r",
									"pm.test(\"7. Grąžintos apklausos priklauso vartotojui 'EmployeeName'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.user).to.eql(pm.collectionVariables.get(\"EmployeeName\"));\r",
									"});\r",
									"//Pasiemame atsitiktinį surveyID ir išsisaugome vėlesniems testams:\r",
									"pm.test(\"8. Atsitiktinės apklausos ID išsaugomas kaip globalus kintamasis 'randomSurveyIdEmployee'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let surveys = jsonData.data.surveyData;\r",
									"    // Patikriname, ar survey sąrašas nėra tuščias\r",
									"    pm.expect(surveys.length).to.be.above(0, \"Survey list should not be empty\");\r",
									"\r",
									"    if (surveys.length > 0) {\r",
									"        // Pasirinkite atsitiktinę apklausą\r",
									"        let randomIndex = Math.floor(Math.random() * surveys.length);\r",
									"        let randomSurveyIdEmployee = surveys[randomIndex]._id;\r",
									"\r",
									"        // Išsaugokite _id į Postman global kintamąjį\r",
									"        pm.globals.set(\"randomSurveyIdEmployee\", randomSurveyIdEmployee);\r",
									"\r",
									"        // Patikriname ar _id išsaugotas teisingai\r",
									"        pm.expect(pm.globals.get(\"randomSurveyIdEmployee\")).to.eql(randomSurveyIdEmployee);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID +! (as empl) {{randomSurveyIdEmployee}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tikrinama, ar žinutės laukas yra teisingas:\r",
									"pm.test(\"4. Žinutės lauko reikšmė yra teisinga: 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\", \"The response message should be 'Survey found'.\");\r",
									"});\r",
									"// Tikrinama, ar '_id' atitinka kintamąjį: perteklinis\r",
									"pm.test(\"5. Apklausos '_id' atitinka kintamąjį 'randomSurveyIdEmployee'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedId = pm.variables.get(\"randomSurveyIdEmployee\"); // Užtikrinti, kad kintamasis 'randomSurveyIdEmployee' yra iš anksto nustatytas Postman aplinkoje\r",
									"    pm.expect(responseData.data.surveyData._id).to.eql(expectedId);\r",
									"});\r",
									"// Gera apklausų struktūra ir minimalūs reikalavimai klausimams\r",
									"pm.test(\"6. Apklausos duomenys atitinka reikalavimus: kiekvienas klausimas pagal savo tipą turi reikiamus atsakymų variantus.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let survey = jsonData.data.surveyData; // Tikrinama tik viena konkreti apklausa pagal ID\r",
									"\r",
									"    // Tikriname, ar apklausa turi bent vieną klausimą\r",
									"    pm.expect(survey.questions, \"Apklausa turi turėti bent vieną klausimą\").to.not.be.empty;\r",
									"\r",
									"    survey.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property(\"label\");\r",
									"        pm.expect(question).to.have.property(\"type\");\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"\r",
									"        // Tikriname, kad radio ir checkbox tipo klausimai turi bent vieną atsakymą\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question.options, \"Radio ir checkbox tipo klausimai privalo turėti bent vieną atsakymą\").to.be.an(\"array\").that.is.not.empty;\r",
									"        }\r",
									"\r",
									"        // Tikriname, kad text ir textarea tipo klausimai neturi 'options' savybės arba ji yra tuščia\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            if (question.hasOwnProperty('options')) {\r",
									"                pm.expect(question.options, \"Text ir textarea tipo klausimai neturėtų turėti 'options' savybės arba ji turi būti tuščia\").to.be.empty;\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyIdEmployee}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! other user's survey (as empl) {{randomSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"//Geras klaidos pranšeimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{randomSurveyIdEmployee}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create survey - admin",
			"item": [
				{
					"name": "api/surveys + text/area [ ] options (as admin) {{newSurveyId}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"pm.test(\"5. Sukurtos apklausos pavadinimas, struktūra ir duomenys atitinka pradinę įvestį.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    // Patikrina, ar apklausos pavadinimas yra teisingas\r",
									"    pm.expect(responseData.data.surveyData.name).to.eql(\"Keliautojų apklausa apie lankytas vietas (by admin)\");\r",
									"\r",
									"    const questions = responseData.data.surveyData.questions;\r",
									"\r",
									"    // Pirmas klausimas\r",
									"    pm.expect(questions[0].label).to.eql(\"Kokia šalis jums labiausiai patiko keliaujant?\");\r",
									"    pm.expect(questions[0].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[0].options).to.eql([\"Italija\", \"Japonija\", \"Ispanija\"]);\r",
									"\r",
									"    // Antras klausimas\r",
									"    pm.expect(questions[1].label).to.eql(\"Kokius transporto priemones naudojote kelionės metu?\");\r",
									"    pm.expect(questions[1].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[1].options).to.eql([\"Lėktuvas\", \"Traukinys\", \"Autobusas\"]);\r",
									"\r",
									"    // Trečias klausimas\r",
									"    pm.expect(questions[2].label).to.eql(\"Kokia buvo jūsų kelionės trukmė?\");\r",
									"    pm.expect(questions[2].type).to.eql(\"text\");\r",
									"    pm.expect(questions[2].options).to.eql([]);\r",
									"\r",
									"    // Ketvirtas klausimas\r",
									"    pm.expect(questions[3].label).to.eql(\"Papildykite savo kelionės įspūdžius\");\r",
									"    pm.expect(questions[3].type).to.eql(\"textarea\");\r",
									"    pm.expect(questions[3].options).to.eql([]);\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"6. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra false).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.false;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"7. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId\", newSurveyId);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Keliautojų apklausa apie lankytas vietas (by admin)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kokia šalis jums labiausiai patiko keliaujant?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Italija\", \"Japonija\", \"Ispanija\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius transporto priemones naudojote kelionės metu?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Lėktuvas\", \"Traukinys\", \"Autobusas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokia buvo jūsų kelionės trukmė?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo kelionės įspūdžius\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys + text/area -options (as admin) {{newSurveyId2}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"pm.test(\"5. Sukurtos apklausos pavadinimas, struktūra ir duomenys atitinka pradinę įvestį.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    // Patikrina, ar apklausos pavadinimas yra teisingas:\r",
									"    pm.expect(responseData.data.surveyData.name).to.eql(\"Darbo aplinkos įvertinimo apklausa (by admin)\");\r",
									"\r",
									"    const questions = responseData.data.surveyData.questions;\r",
									"\r",
									"    // Pirmas klausimas\r",
									"    pm.expect(questions[0].label).to.eql(\"Kaip vertinate savo darbo vietos komfortiškumą?\");\r",
									"    pm.expect(questions[0].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[0].options).to.eql([\"Labai komfortiška\", \"Pakankamai komfortiška\", \"Nekomfortiška\"]);\r",
									"\r",
									"    // Antras klausimas\r",
									"    pm.expect(questions[1].label).to.eql(\"Kaip vertinate bendravimą su kolegomis?\");\r",
									"    pm.expect(questions[1].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[1].options).to.eql([\"Puikus\", \"Geras\", \"Prastas\"]);\r",
									"\r",
									"    // Trečias klausimas\r",
									"    pm.expect(questions[2].label).to.eql(\"Kokie veiksniai trukdo jūsų darbui?\");\r",
									"    pm.expect(questions[2].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[2].options).to.eql([\"Triukšmas\", \"Netvarka\", \"Stresas\"]);\r",
									"\r",
									"    // Ketvirtas klausimas\r",
									"    pm.expect(questions[3].label).to.eql(\"Kokius privalumus įžvelgiate savo darbo aplinkoje?\");\r",
									"    pm.expect(questions[3].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[3].options).to.eql([\"Draugiškumas\", \"Inovacijos\", \"Lankstumas\"]);\r",
									"\r",
									"    // Penktas klausimas\r",
									"    pm.expect(questions[4].label).to.eql(\"Ką manote apie darbo valandas?\");\r",
									"    pm.expect(questions[4].type).to.eql(\"text\");\r",
									"    pm.expect(questions[4]).to.not.have.property(\"options\");\r",
									"\r",
									"    // Šeštas klausimas\r",
									"    pm.expect(questions[5].label).to.eql(\"Ar esate patenkinti darbo grafiku?\");\r",
									"    pm.expect(questions[5].type).to.eql(\"text\");\r",
									"    pm.expect(questions[5]).to.not.have.property(\"options\");\r",
									"\r",
									"    // Septintas klausimas\r",
									"    pm.expect(questions[6].label).to.eql(\"Papildykite savo mintis apie darbo aplinkos saugumą.\");\r",
									"    pm.expect(questions[6].type).to.eql(\"textarea\");\r",
									"    pm.expect(questions[6]).to.not.have.property(\"options\");\r",
									"\r",
									"    // Aštuntas klausimas\r",
									"    pm.expect(questions[7].label).to.eql(\"Papildykite savo mintis apie karjeros galimybes įmonėje.\");\r",
									"    pm.expect(questions[7].type).to.eql(\"textarea\");\r",
									"    pm.expect(questions[7]).to.not.have.property(\"options\");\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"6. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra false).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.false;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"7. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId2 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId2\", newSurveyId2);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Darbo aplinkos įvertinimo apklausa (by admin)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate savo darbo vietos komfortiškumą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai komfortiška\", \"Pakankamai komfortiška\", \"Nekomfortiška\"]\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate bendravimą su kolegomis?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikus\", \"Geras\", \"Prastas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokie veiksniai trukdo jūsų darbui?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Triukšmas\", \"Netvarka\", \"Stresas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius privalumus įžvelgiate savo darbo aplinkoje?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Draugiškumas\", \"Inovacijos\", \"Lankstumas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ką manote apie darbo valandas?\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"Ar esate patenkinti darbo grafiku?\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo mintis apie darbo aplinkos saugumą.\",\r\n            \"type\": \"textarea\"\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo mintis apie karjeros galimybes įmonėje.\",\r\n            \"type\": \"textarea\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -questions (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide at least one question'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide at least one question\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Apklausėlė\",\r\n  \"questions\" : [\r\n\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -isEmbeddable (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: isEmbeddable: Please select if survey can be embedded'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: isEmbeddable: Please select if survey can be embedded\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Savaitės apklausa\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -name (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: name: Please enter your survey name'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: name: Please enter your survey name\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -label (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.0.label: Please enter your survey label'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.0.label: Please enter your survey label\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Savaitės apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.0.type: Please enter your survey input'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.0.type: Please enter your survey input\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Savaitės apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - bad type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.0.type: `raadio` is not a valid enum value for path `type`.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.0.type: `raadio` is not a valid enum value for path `type`.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Savaitės apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"raadio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - text+options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.2.options: Question options are not allowed for text or textarea type questions.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.2.options: Question options are not allowed for text or textarea type questions.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - textarea+options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - radio [ ] options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.0.options: Radio or checkbox type questions must have at least 1 option.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.0.options: Radio or checkbox type questions must have at least 1 option.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Savaitės apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - checkbox [ ] options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions.1.options: Radio or checkbox type questions must have at least 1 option.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: questions.1.options: Radio or checkbox type questions must have at least 1 option.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - bad question data type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: questions: Cast to embedded failed for value...'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Survey validation failed: questions: Cast to embedded failed for value\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Dienos apklausa\",\r\n  \"isEmbeddable\": \"false\",\r\n  \"questions\": \"Tai turėtų būti masyvas, o ne eilutė\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys -  invalid JSON format - (as admin) !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid JSON format'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Invalid JSON format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// Neteisingai suformatuotas JSON (pvz., trūksta kabliataškio prieš 'questions')\r\n{\r\n  \"name\": \"Dienos apklausa\",\r\n  \"isEmbeddable\": \"false\"\r\n  \"questions\": [\r\n    {\r\n      \"label\": \"Pirmas klausimas?\",\r\n      \"type\": \"radio\",\r\n      \"options\": [\"Atskymas a\", \"Atskymas b\"]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create survey - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    var responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys + text/area [ ] answers (as empl) {{newSurveyId3}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas :\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"pm.test(\"5. Sukurtos apklausos pavadinimas, struktūra ir duomenys atitinka pradinę įvestį.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    // Patikrina, ar apklausos pavadinimas yra teisingas\r",
									"    pm.expect(responseData.data.surveyData.name).to.eql(\"Mėgstamiausios maitinimo įstaigos apklausa (by employee)\");\r",
									"\r",
									"    const questions = responseData.data.surveyData.questions;\r",
									"\r",
									"    // Pirmas klausimas\r",
									"    pm.expect(questions[0].label).to.eql(\"Koks jūsų mėgstamiausias restoranas?\");\r",
									"    pm.expect(questions[0].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[0].options).to.eql([\"Restoranas A\", \"Restoranas B\", \"Restoranas C\"]);\r",
									"\r",
									"    // Antras klausimas\r",
									"    pm.expect(questions[1].label).to.eql(\"Kokie maisto tipai jums patinka?\");\r",
									"    pm.expect(questions[1].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[1].options).to.eql([\"Itališkas\", \"Azijietiškas\", \"Meksikietiškas\"]);\r",
									"\r",
									"    // Trečias klausimas\r",
									"    pm.expect(questions[2].label).to.eql(\"Kodėl pasirinkote šį restoraną?\");\r",
									"    pm.expect(questions[2].type).to.eql(\"text\");\r",
									"    pm.expect(questions[2].options).to.eql([]);\r",
									"\r",
									"    // Ketvirtas klausimas\r",
									"    pm.expect(questions[3].label).to.eql(\"Papildykite savo nuomonę apie aptarnavimo kokybę.\");\r",
									"    pm.expect(questions[3].type).to.eql(\"textarea\");\r",
									"    pm.expect(questions[3].options).to.eql([]);\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"6. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra false).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.false;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"7. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId3'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId3 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId3\", newSurveyId3);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Mėgstamiausios maitinimo įstaigos apklausa (by employee)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Koks jūsų mėgstamiausias restoranas?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Restoranas A\", \"Restoranas B\", \"Restoranas C\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokie maisto tipai jums patinka?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Itališkas\", \"Azijietiškas\", \"Meksikietiškas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kodėl pasirinkote šį restoraną?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo nuomonę apie aptarnavimo kokybę.\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys + text/area-options (as empl) {{newSurveyId4}}+C",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"pm.test(\"5. Sukurtos apklausos pavadinimas, struktūra ir duomenys atitinka pradinę įvestį.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    // Patikrina, ar apklausos pavadinimas yra teisingas:\r",
									"    pm.expect(responseData.data.surveyData.name).to.eql(\"ChatGPT naudojimo apklausa (by employee)\");\r",
									"\r",
									"    const questions = responseData.data.surveyData.questions;\r",
									"\r",
									"    // Pirmas klausimas\r",
									"    pm.expect(questions[0].label).to.eql(\"Kaip dažnai naudojate ChatGPT?\");\r",
									"    pm.expect(questions[0].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[0].options).to.eql([\"Kasdien\", \"Kelis kartus per savaitę\", \"Retkarčiais\", \"Nenaudoju\"]);\r",
									"\r",
									"    // Antras klausimas\r",
									"    pm.expect(questions[1].label).to.eql(\"Kokiose srityse dažniausiai naudojate ChatGPT? (Pasirinkite visus taikomus variantus)\");\r",
									"    pm.expect(questions[1].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[1].options).to.eql([\"Asmeninė kūryba\", \"Moksliniai tyrimai\", \"Verslo projektai\", \"Asmeninė pagalba\", \"Kitos sritys\"]);\r",
									"\r",
									"    // Trečias klausimas\r",
									"    pm.expect(questions[2].label).to.eql(\"Kokios yra jūsų patirtys su ChatGPT? (Pasirinkite vieną ar daugiau variantų)\");\r",
									"    pm.expect(questions[2].type).to.eql(\"checkbox\");    \r",
									"    pm.expect(questions[2].options).to.eql([\"Teigiamos\", \"Neigiamos\", \"Neutrinamos\", \"Nėra patirties\"]);\r",
									"\r",
									"    // Ketvirtas klausimas\r",
									"    pm.expect(questions[3].label).to.eql(\"Kokias funkcijas norėtumėte matyti ateityje ChatGPT?\");\r",
									"    pm.expect(questions[3].type).to.eql(\"textarea\");\r",
									"\r",
									"    // Penktas klausimas\r",
									"    pm.expect(questions[4].label).to.eql(\"Kokį vaidmenį jūsų projektuose atlieka ChatGPT?\");\r",
									"    pm.expect(questions[4].type).to.eql(\"text\");\r",
									"\r",
									"    // Šeštas klausimas\r",
									"    pm.expect(questions[5].label).to.eql(\"Koks yra jūsų bendras įvertinimas apie ChatGPT naudingumą?\");\r",
									"    pm.expect(questions[5].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[5].options).to.eql([\"Labai naudingas\", \"Vidutiniškai naudingas\", \"Nenaudingas\"]);\r",
									"\r",
									"    // Septintas klausimas\r",
									"    pm.expect(questions[6].label).to.eql(\"Ar naudojate ChatGPT savo projektuose?\");\r",
									"    pm.expect(questions[6].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[6].options).to.eql([\"Taip\", \"Ne\"]);\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"6. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId4'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId4 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId4\", newSurveyId4);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"ChatGPT naudojimo apklausa (by employee)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Kaip dažnai naudojate ChatGPT?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Kasdien\", \"Kelis kartus per savaitę\", \"Retkarčiais\", \"Nenaudoju\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kokiose srityse dažniausiai naudojate ChatGPT? (Pasirinkite visus taikomus variantus)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Asmeninė kūryba\", \"Moksliniai tyrimai\", \"Verslo projektai\", \"Asmeninė pagalba\", \"Kitos sritys\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kokios yra jūsų patirtys su ChatGPT? (Pasirinkite vieną ar daugiau variantų)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Teigiamos\", \"Neigiamos\", \"Neutrinamos\", \"Nėra patirties\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kokias funkcijas norėtumėte matyti ateityje ChatGPT?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kokį vaidmenį jūsų projektuose atlieka ChatGPT?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Koks yra jūsų bendras įvertinimas apie ChatGPT naudingumą?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Labai naudingas\", \"Vidutiniškai naudingas\", \"Nenaudingas\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Ar naudojate ChatGPT savo projektuose?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Taip\", \"Ne\"]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys - -name (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey validation failed: name: Please enter your survey name'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey validation failed: name: Please enter your survey name\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys -! text/area [ ] answers (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa (by user)\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys -! text/area-answers (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa (by user)\",\r\n    \"isEmbeddable\": \"false\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas a\", \"Atskymas b\", \"Atskymas c\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "api/surveys -! -name (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas aa\", \"Atskymas ab\", \"Atskymas ac\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\"\r\n\t\t}\r\n\t],\r\n    \"isEmbeddable\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update a survey - admin",
			"item": [
				{
					"name": "surveys/:surveyID + (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas yra \"Survey updated successfully\":\r",
									"pm.test(\"4. Gaunamas tinkamas prasnešimas 'Survey updated successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey updated successfully\");\r",
									"});\r",
									"// Patikrina, ar klausimų tipai ir jų atsakymai yra teisingi:\r",
									"pm.test(\"5. Sukurtos apklausos pavadinimas, struktūra ir duomenys atitinka pradinę įvestį.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    // Patikrina, ar apklausos pavadinimas yra teisingas\r",
									"    pm.expect(responseData.data.surveyData.name).to.eql(\"Keliautojų apklausa apie lankytas vietas (updated by admin)\");\r",
									"\r",
									"    const questions = responseData.data.surveyData.questions;\r",
									"\r",
									"    // Pirmas klausimas\r",
									"    pm.expect(questions[0].label).to.eql(\"Kokia šalis jums labiausiai patiko keliaujant?\");\r",
									"    pm.expect(questions[0].type).to.eql(\"radio\");\r",
									"    pm.expect(questions[0].options).to.eql([\"Italija\", \"Japonija\", \"Ispanija\"]);\r",
									"\r",
									"    // Antras klausimas\r",
									"    pm.expect(questions[1].label).to.eql(\"Kokius transporto priemones naudojote kelionės metu?\");\r",
									"    pm.expect(questions[1].type).to.eql(\"checkbox\");\r",
									"    pm.expect(questions[1].options).to.eql([\"Lėktuvas\", \"Traukinys\", \"Autobusas\"]);\r",
									"\r",
									"    // Trečias klausimas\r",
									"    pm.expect(questions[2].label).to.eql(\"Kokia buvo jūsų kelionės trukmė?\");\r",
									"    pm.expect(questions[2].type).to.eql(\"text\");\r",
									"    pm.expect(questions[2].options).to.eql([]);\r",
									"\r",
									"    // Ketvirtas klausimas\r",
									"    pm.expect(questions[3].label).to.eql(\"Papildykite savo kelionės įspūdžius\");\r",
									"    pm.expect(questions[3].type).to.eql(\"textarea\");\r",
									"    pm.expect(questions[3].options).to.eql([]);\r",
									"});\r",
									"\r",
									"// Tikrina, ar atnaujinimo data yra naujesnė už sukūrimo datą:\r",
									"pm.test(\"6. Atnaujinimo data ('updatedAt') yra naujesnė už sukūrimo datą ('createdAt').\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let createdAt = new Date(responseData.data.surveyData.createdAt);\r",
									"    let updatedAt = new Date(responseData.data.surveyData.updatedAt);\r",
									"\r",
									"    pm.expect(updatedAt.getTime()).to.be.above(createdAt.getTime());\r",
									"});\r",
									"// Tikrina, ar apklausos būsena yra 'new':\r",
									"pm.test(\"7. Apklausos būsena yra 'new'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.state).to.eql(\"new\", \"The survey state should remain 'new'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Keliautojų apklausa apie lankytas vietas (updated by admin)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kokia šalis jums labiausiai patiko keliaujant?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Italija\", \"Japonija\", \"Ispanija\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius transporto priemones naudojote kelionės metu?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Lėktuvas\", \"Traukinys\", \"Autobusas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokia buvo jūsų kelionės trukmė?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo kelionės įspūdžius\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID + other user's survey (as admin) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas yra \"Survey updated successfully\":\r",
									"pm.test(\"4. Gaunamas tinkamas prasnešimas 'Survey updated successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey updated successfully\");\r",
									"});\r",
									"// Tikrina, ar kiekvienas klausimas atnaujintas pagal įvesties duomenis:\r",
									"pm.test(\"Apklausos pavadinimas, klausimai ir atsakymai atnaujinti pagal įvesties duomenis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Paima duomenis iš surveyData objekto\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    pm.expect(surveyData.name).to.eql(\"Psichologinės būsenos įvertinimo apklausa (by admin)\", \"Apklausos pavadinimas turi atitikti\");\r",
									"\r",
									"    const expectedQuestions = [\r",
									"        { label: \"Kaip vertinate savo šiandieninę emocinę būseną?\", type: \"radio\", options: [\"Labai gera\", \"Gera\", \"Vidutinė\"] },\r",
									"        { label: \"Kurie veiksniai labiausiai įtakoja jūsų nuotaiką?\", type: \"checkbox\", options: [\"Darbas\", \"Šeimos santykiai\", \"Asmeniniai iššūkiai\"] },\r",
									"        { label: \"Ką darytumėte, kad pagerintumėte savo psichologinę būseną?\", type: \"text\", options: [] },\r",
									"        { label: \"Papildykite bet kokias mintis apie savo psichologinę būseną.\", type: \"textarea\", options: [] },\r",
									"        { label: \"Kokie metodai ar priemonės jums padeda atsipalaiduoti?\", type: \"radio\", options: [\"Sportas\", \"Meditacija\", \"Skaitymas\"] },\r",
									"        { label: \"Kokius psichologo patarimus laikote naudingiausiais?\", type: \"checkbox\", options: [\"Nustatykite aiškius tikslus\", \"Praktikuokite dėkingumą\", \"Išmokite atsisakyti\"] }\r",
									"    ];\r",
									"\r",
									"    // Tikrina, ar visi klausimai ir jų tipai bei pasirinkimai teisingai sukurta\r",
									"    pm.expect(surveyData.questions.length).to.eql(expectedQuestions.length, \"Turėtų būti teisingas klausimų skaičius\");\r",
									"    surveyData.questions.forEach((question, index) => {\r",
									"        pm.expect(question.label).to.eql(expectedQuestions[index].label, `Klausimo ${index + 1} pavadinimas turi atitikti`);\r",
									"        pm.expect(question.type).to.eql(expectedQuestions[index].type, `Klausimo ${index + 1} tipas turi atitikti`);\r",
									"        if (question.options) {\r",
									"            pm.expect(question.options).to.eql(expectedQuestions[index].options, `Klausimo ${index + 1} pasirinkimai turi atitikti`);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"// Tikrina, ar atnaujinimo data yra naujesnė už sukūrimo datą:\r",
									"pm.test(\"6. Atnaujinimo data ('updatedAt') yra naujesnė už sukūrimo datą ('createdAt').\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let createdAt = new Date(responseData.data.surveyData.createdAt);\r",
									"    let updatedAt = new Date(responseData.data.surveyData.updatedAt);\r",
									"\r",
									"    pm.expect(updatedAt.getTime()).to.be.above(createdAt.getTime());\r",
									"});\r",
									"// Tikrina, ar apklausos būsena yra 'new':\r",
									"pm.test(\"7. Apklausos būsena yra 'new'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.state).to.eql(\"new\", \"The survey state should remain 'new'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Psichologinės būsenos įvertinimo apklausa (by admin)\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate savo šiandieninę emocinę būseną?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gera\", \"Gera\", \"Vidutinė\"]\r\n        },\r\n        {\r\n            \"label\": \"Kurie veiksniai labiausiai įtakoja jūsų nuotaiką?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Darbas\", \"Šeimos santykiai\", \"Asmeniniai iššūkiai\"]\r\n        },\r\n        {\r\n            \"label\": \"Ką darytumėte, kad pagerintumėte savo psichologinę būseną?\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"Papildykite bet kokias mintis apie savo psichologinę būseną.\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kokie metodai ar priemonės jums padeda atsipalaiduoti?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Sportas\", \"Meditacija\", \"Skaitymas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius psichologo patarimus laikote naudingiausiais?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Nustatykite aiškius tikslus\", \"Praktikuokite dėkingumą\", \"Išmokite atsisakyti\"]\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - bad id (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Failed to update survey\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "661cd500a532a5afbae71e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  # (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Failed to update survey\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "#"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  % (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Failed to update survey\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  ? (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Failed to update survey\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "?"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  \\ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Failed to update survey\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "\\"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - -name (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide survey name and at least one question'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide survey name and at least one question\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"123\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - +isembeddable (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas yra \"Survey updated successfully\":\r",
									"pm.test(\"4. Gaunamas tinkamas prasnešimas 'Survey updated successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey updated successfully\");\r",
									"});\r",
									"// Testas, kad 'isEmbeddable' nėra true\r",
									"pm.test(\"5. 'isEmbeddable' reikšmė neatsinaujino į 'true'.\", function() {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.not.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Keliautojų apklausa apie lankytas vietas (updated by admin)\",\r\n    \"isEmbeddable\": \"true\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kokia šalis jums labiausiai patiko keliaujant?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Italija\", \"Japonija\", \"Ispanija\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius transporto priemones naudojote kelionės metu?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Lėktuvas\", \"Traukinys\", \"Autobusas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokia buvo jūsų kelionės trukmė?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Papildykite savo kelionės įspūdžius\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - -questions (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide survey name and at least one question'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide survey name and at least one question\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"123\",\r\n  \"questions\" : []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - -type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.0.type: Please enter your survey input'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.0.type: Please enter your survey input\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - bad type (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.0.type: `raadio` is not a valid enum value for path `type`.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.0.type: `raadio` is not a valid enum value for path `type`.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"raadio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - textarea+options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - checkbox-options (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.1.options: Radio or checkbox type questions must have at least 1 option.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.1.options: Radio or checkbox type questions must have at least 1 option.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -  invalid JSON format - (as admin) !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid JSON format'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Invalid JSON format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t}\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso petikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by admin)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update a survey - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID + (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas yra \"Survey updated successfully\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey updated successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey updated successfully\");\r",
									"});\r",
									"// Patikrina, ar klausimų struktūra ir duomenys yra teisingi:\r",
									"pm.test(\"5. Apklausos pavadinimas, klausimai ir atsakymai atnaujinti pagal įvesties duomenis.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.name).to.eql(\"Psichologinės būsenos įvertinimo apklausa (updated by employee)\", \"Apklausos pavadinimas turi atitikti\");\r",
									"\r",
									"    const expectedQuestions = [\r",
									"        { label: \"Kaip vertinate savo šiandieninę emocinę būseną?\", type: \"radio\", options: [\"Labai gera\", \"Gera\", \"Vidutinė\", \"Bloga\", \"Labai bloga\"] },\r",
									"        { label: \"Kurie veiksniai labiausiai įtakoja jūsų nuotaiką?\", type: \"checkbox\", options: [\"Darbas\", \"Šeimos santykiai\", \"Asmeniniai iššūkiai\", \"Finansinė padėtis\", \"Sveikata\"] },\r",
									"        { label: \"Ką darytumėte, kad pagerintumėte savo psichologinę būseną?\", type: \"text\" },\r",
									"        { label: \"Papildykite bet kokias mintis apie savo psichologinę būseną.\", type: \"textarea\" },\r",
									"        { label: \"Kokie metodai ar priemonės jums padeda atsipalaiduoti?\", type: \"radio\", options: [\"Sportas\", \"Meditacija\", \"Skaitymas\", \"Žaidimai\", \"Muzika\"] },\r",
									"        { label: \"Kokius psichologo patarimus laikote naudingiausiais?\", type: \"checkbox\", options: [\"Nustatykite aiškius tikslus\", \"Praktikuokite dėkingumą\", \"Išmokite atsisakyti\", \"Raskite laiko sau\", \"Bendravimas\"] },\r",
									"        { label: \"Kokie veiksniai trukdo jums jaustis gerai?\", type: \"checkbox\", options: [\"Stresas darbe\", \"Nesaugumas\", \"Nepakankamas miegas\", \"Neaktyvus gyvenimo būdas\", \"Socialiniai iššūkiai\"] },\r",
									"        { label: \"Ką manote apie savo šiandienos dieną?\", type: \"radio\", options: [\"Puiki\", \"Gera\", \"Normali\", \"Bloga\", \"Siaubinga\"] },\r",
									"        { label: \"Kaip dažnai jaučiatės nusivylę?\", type: \"radio\", options: [\"Labai dažnai\", \"Dažnai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"] },\r",
									"        { label: \"Kaip jūs vertinate savo bendravimo įgūdžius?\", type: \"radio\", options: [\"Puikūs\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"] },\r",
									"        { label: \"Kaip dažnai per dieną jaučiate stresą?\", type: \"radio\", options: [\"Kasdien\", \"Dažnai\", \"Kartais\", \"Retkarčiais\", \"Beveik niekada\"] },\r",
									"        { label: \"Ar jūsų gyvenimo būdas yra sveikas?\", type: \"text\" },\r",
									"        { label: \"Ką keistumėte savo gyvenime?\", type: \"textarea\" },\r",
									"        { label: \"Kurie gyvenimo aspektai jums teikia didžiausią džiaugsmą?\", type: \"checkbox\", options: [\"Šeima\", \"Darbas\", \"Pomėgiai\", \"Kelionės\", \"Mokymasis\"] },\r",
									"        { label: \"Kokie jūsų tikslai artimiausiam mėnesiui?\", type: \"text\" }\r",
									"    ];\r",
									"\r",
									"    // Tikrina, ar visi klausimai ir jų tipai bei pasirinkimai teisingai atnaujinti\r",
									"    responseData.questions.forEach((question, index) => {\r",
									"        pm.expect(question.label).to.eql(expectedQuestions[index].label, `Klausimo ${index + 1} pavadinimas turi atitikti`);\r",
									"        pm.expect(question.type).to.eql(expectedQuestions[index].type, `Klausimo ${index + 1} tipas turi atitikti`);\r",
									"        if (question.options && expectedQuestions[index].options) {\r",
									"            pm.expect(question.options).to.eql(expectedQuestions[index].options, `Klausimo ${index + 1} pasirinkimai turi atitikti`);\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"// Patikrina, ar atnaujinimo data (updatedAt) yra naujesnė už sukūrimo datą (createdAt):\r",
									"pm.test(\"6. Atnaujinimo data ('updatedAt') yra naujesnė už sukūrimo datą ('createdAt').\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let createdAt = new Date(responseData.data.surveyData.createdAt);\r",
									"    let updatedAt = new Date(responseData.data.surveyData.updatedAt);\r",
									"    pm.expect(updatedAt).to.be.above(createdAt);\r",
									"});\r",
									"// Tikrina, ar apklausos būsena yra 'new':\r",
									"pm.test(\"7. Apklausos būsena yra 'new'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.state).to.eql(\"new\", \"The survey state should remain 'new'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Psichologinės būsenos įvertinimo apklausa (updated by employee)\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate savo šiandieninę emocinę būseną?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gera\", \"Gera\", \"Vidutinė\", \"Bloga\", \"Labai bloga\"]\r\n        },\r\n        {\r\n            \"label\": \"Kurie veiksniai labiausiai įtakoja jūsų nuotaiką?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Darbas\", \"Šeimos santykiai\", \"Asmeniniai iššūkiai\", \"Finansinė padėtis\", \"Sveikata\"]\r\n        },\r\n        {\r\n            \"label\": \"Ką darytumėte, kad pagerintumėte savo psichologinę būseną?\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"Papildykite bet kokias mintis apie savo psichologinę būseną.\",\r\n            \"type\": \"textarea\"\r\n        },\r\n        {\r\n            \"label\": \"Kokie metodai ar priemonės jums padeda atsipalaiduoti?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Sportas\", \"Meditacija\", \"Skaitymas\", \"Žaidimai\", \"Muzika\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius psichologo patarimus laikote naudingiausiais?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Nustatykite aiškius tikslus\", \"Praktikuokite dėkingumą\", \"Išmokite atsisakyti\", \"Raskite laiko sau\", \"Bendravimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokie veiksniai trukdo jums jaustis gerai?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Stresas darbe\", \"Nesaugumas\", \"Nepakankamas miegas\", \"Neaktyvus gyvenimo būdas\", \"Socialiniai iššūkiai\"]\r\n        },\r\n        {\r\n            \"label\": \"Ką manote apie savo šiandienos dieną?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puiki\", \"Gera\", \"Normali\", \"Bloga\", \"Siaubinga\"]\r\n        },\r\n        {\r\n            \"label\": \"Kaip dažnai jaučiatės nusivylę?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai dažnai\", \"Dažnai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kaip jūs vertinate savo bendravimo įgūdžius?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikūs\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kaip dažnai per dieną jaučiate stresą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Kasdien\", \"Dažnai\", \"Kartais\", \"Retkarčiais\", \"Beveik niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar jūsų gyvenimo būdas yra sveikas?\",\r\n            \"type\": \"text\"\r\n        },\r\n        {\r\n            \"label\": \"Ką keistumėte savo gyvenime?\",\r\n            \"type\": \"textarea\"\r\n        },\r\n        {\r\n            \"label\": \"Kurie gyvenimo aspektai jums teikia didžiausią džiaugsmą?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Šeima\", \"Darbas\", \"Pomėgiai\", \"Kelionės\", \"Mokymasis\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokie jūsų tikslai artimiausiam mėnesiui?\",\r\n            \"type\": \"text\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -!  other user's survey (as empl) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Statuso pranešimas yra teisingas 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by employee)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b atnaujinta (by employee)\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by employee)\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - bad id (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Invalid ID format.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by employee)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b atnaujinta (by employee)\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by employee)\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "661cd500a532a5afbae71e"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  # (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Invalid ID format.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa pakoreguota\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/surveys/:surveyID",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "#"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  % (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Invalid ID format.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa pakoreguota\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/surveys/:surveyID",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  ? (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Invalid ID format.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa pakoreguota\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/surveys/:surveyID",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "?"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - id  \\ (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Invalid ID format.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa pakoreguota\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas?\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas?\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/surveys/:surveyID",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "\\"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - -type (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.0.type: Please enter your survey input'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.0.type: Please enter your survey input\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by employee)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"\",\r\n\t\t\t\"options\" : [\"Atskymas b atnaujinta (by employee)\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by employee)\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID - textarea+options (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.eql(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.3.answers: Answers are not allowed for text or textarea type questions.\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Validation failed: questions.3.options: Question options are not allowed for text or textarea type questions.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by employee)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b atnaujinta (by employee)\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by employee)\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta (by employee)\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by employee)\"]\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Statuso pranešimas yra teisingas 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta (by user)\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta (by user)\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Atskymas b atnaujinta (by user)\", \"Atskymas bb\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta (by user)\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Atskymas cc\", \"Atskymas ccc\", \"Atskymas ccc atnaujinta (by user)\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta (by user)\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta (by user)\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add respondents while state is new - admin NEW",
			"item": [
				{
					"name": "surveys/:surveyID/respondent  + empty array (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas kad respondentu nera ir masyvas tuscias:\r",
									"pm.test(\"4. Gaunamas tuščias respondentų sąrašas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.currentCount).to.eql(0);\r",
									"    pm.expect(responseData.data.currentRespondents).to.eql([]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir nurodomas teisingas priskirtų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nusasmeninta@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  +! @kitm.lt (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir nurodomas teisingas priskirtų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"survery.user@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - bad email (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad elekronins pastas nevalidus, nepridejo respondentu ir kad masyvas tuscias.\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'No listed respondents added', ir teisingai nurodomas ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"No listed respondents added\",);\r",
									"    pm.expect(responseData.data.addedCount).to.eql(0);\r",
									"    pm.expect(responseData.data.addedRespondents).to.eql([]);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(3)\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"ValidationError: respondent: This email is not a valid one\",);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"badEmail02@subdomain.com\",\r\n    \"bademail@studkitmlt\",\r\n    \"anotherbademailstud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - [] (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide at least one respondent email'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide at least one respondent email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + -same email twice (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad elekronins pastas nevalidus, nepridejo respondentu ir kad masyvas tuscias.\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymas, kad vienas paštas pridėtas, o antrasis ignoruojamas 'Some listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents added\");   \r",
									"    pm.expect(responseData.data.addedCount).to.eql(1);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(1);\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"already added;\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nusasmeninta1@stud.kitm.lt\",\r\n    \"nusasmeninta1@stud.kitm.lt\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - bad type (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad elekronins pastas nevalidus, nepridejo respondentu ir kad masyvas tuscias.\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'No listed respondents added', ir teisingai nurodomas ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"No listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(0);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    123456,\r\n    {\"email\": \"nuasmeninta2.kitm.lt\"}\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - bad key (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide at least one respondent email'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Please provide at least one respondent email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"recipient\": [\r\n    \"nuasmeninta3.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - too long email (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad elekronins pastas nevalidus, nepridejo respondentu ir kad masyvas tuscias.\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'No listed respondents added', ir teisingai nurodomas ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"No listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(0);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(1);\r",
									"    pm.expect(responseData.data.warrningMessage).to.eql(\"ValidationError: respondent: This email is not a valid one; \");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    //120 leistina, 121 simboliai:\r\n    \"nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.nuasmeninta.n@kitm.lt\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - Invalid JSON format (as admin) {{newSurveyId}} !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid JSON format'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Invalid JSON format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  respondents: [\r\n    \"nuasmeninta4@stud.kitm.lt\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - group of emails (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad elekronins pastas nevalidus, nepridejo respondentu ir kad masyvas tuscias.\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'No listed respondents added', ir teisingai nurodomas ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"No listed respondents added\",);\r",
									"    pm.expect(responseData.data.addedCount).to.eql(0);\r",
									"    pm.expect(responseData.data.addedRespondents).to.eql([]);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(3)\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"ValidationError: respondent: This email is not a valid one\",);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nusasmeninta1.kitm.lt nusasmeninta2.kitm.lt nusasmeninta3@stud.kitm.lt nusasmeninta4@stud.kitm.lt nusasmeninta5@stud.kitm.lt nusasmeninta6@stud.kitm.lt nusasmeninta7@stud.kitm.lt nusasmeninta8@stud.kitm.lt survery.admin@kitm.lt\",\r\n    \"nusasmeninta1.kitm.lt, nusasmeninta2.kitm.lt, nusasmeninta3@stud.kitm.lt, nusasmeninta4@stud.kitm.lt, nusasmeninta5@stud.kitm.lt, nusasmeninta6@stud.kitm.lt, nusasmeninta7@stud.kitm.lt, nusasmeninta8@stud.kitm.lt, survery.admin@kitm.lt\",\r\n    \"nuasmeninta1@stud.kitm.lt,nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n} \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - invalid+valid emails (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Some listed respondents added' ir teisingai nurodomas pridėtų ir ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(1);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(2);\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"This email is not a valid one\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nusasmeninta1.kitm.lt nusasmeninta2.kitm.lt nusasmeninta3@stud.kitm.lt nusasmeninta4@stud.kitm.lt nusasmeninta5@stud.kitm.lt nusasmeninta6@stud.kitm.lt nusasmeninta7@stud.kitm.lt nusasmeninta8@stud.kitm.lt survery.admin@kitm.lt\",\r\n    \"nuasmeninta5@stud.kitm.lt\",\r\n    \"badEmail02@subdomain.com\"\r\n  ]\r\n} \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + 1-non-exist (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas pranesimas kad respondentai pasalinti kiek repondentu liko ir kiek istryne\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Some listed respondents deleted' ir teisingai nurodomas ištrintų ir ignoruojamų resapondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents deleted\");\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(5)\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(1)\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"was not a respondent;\")\r",
									"});\r",
									"// Tikrina, ar 'AdditionalUserElP' yra tarp pašalintų respondentų el. paštų:\r",
									"pm.test(\"5. 'AdditionalUserElP' yra tarp pašalintų respondentų.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let deletedEmails = responseData.data.deletedRespondents;\r",
									"    let additionalUserEmail = pm.variables.get(\"AdditionalUserElP\");\r",
									"\r",
									"    pm.expect(deletedEmails).to.include(additionalUserEmail, `The email ${additionalUserEmail} should be among the deleted respondents.`);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"nuasmeninta5@stud.kitm.lt\",\r\n    \"nuasmeninta3@stud.kitm.lt\",\r\n    \"survery.user@kitm.lt\",\r\n    \"survery.teacher@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas kad respondentu nera ir masyvas tuscias:\r",
									"pm.test(\"4. Gaunamas teisingas respondentų sąrašas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId}} not in results+new (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// 'newSurveyId' nėra tarp atvaizduotų apklausų:\r",
									"pm.test(\"4. Apklausos 'newSurveyId' nėra tarp atvaizduotų apklausų.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyIds = responseData.data.surveys.map(survey => survey._id);\r",
									"    let isNewSurveyIdIncluded = surveyIds.includes(pm.globals.get(\"newSurveyId\"));\r",
									"\r",
									"    // Tikrinti, kad `{{newSurveyId}}` nėra tarp grąžintų apklausų ID\r",
									"    pm.expect(isNewSurveyIdIncluded).to.be.false;\r",
									"});\r",
									"//Testas patikrinti, kad visų apklausų būsena yra \"active\"\r",
									"pm.test(\"5. Visų grąžintų apklausų būsena yra 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let allActive = responseData.data.surveys.every(survey => survey.state === \"active\");\r",
									"\r",
									"    // Tikrinti, kad visų apklausų 'state' yra \"active\"\r",
									"    pm.expect(allActive, \"All surveys should have 'state' set to 'active'.\").to.be.true;\r",
									"});\r",
									"\r",
									"//Patikriname, kad visų apklausų ID yra unikalūs:\r",
									"pm.test(\"6. Visų grąžintų apklausų ID yra unikalus.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyIds = responseData.data.surveys.map(survey => survey._id);\r",
									"    let uniqueIds = [...new Set(surveyIds)];\r",
									"\r",
									"    // Tikrinti, ar visi ID yra unikalūs\r",
									"    pm.expect(surveyIds.length).to.equal(uniqueIds.length, \"All survey IDs should be unique.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + empty array (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas kad respondentu nera ir masyvas tuscias:\r",
									"pm.test(\"4. Gaunamas tuščias respondentų sąrašas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.currentCount).to.eql(0);\r",
									"    pm.expect(responseData.data.currentRespondents).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent - delete from 0 respondents (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"// Gaunamas pranesimas kad body irasytu respondentu istrinti negalima nes ju nera patikriname kiek irasu istrinta koks masyvas istrintas\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas, kad trynimui pateikti respondentai nebuvo respondentai apklausoje 'No listed respondents deleted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    const expectedUserEmail = pm.collectionVariables.get(\"AdditionalUserElP\");\r",
									"\r",
									"    pm.expect(responseData.data.message).to.eql(\"No listed respondents deleted\",);\r",
									"    pm.expect(responseData.data.currentCount).to.eql(0);\r",
									"    pm.expect(responseData.data.currentRespondents).to.eql([]);\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(0);\r",
									"    pm.expect(responseData.data.deletedRespondents).to.eql([]);\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(5);\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"emilija.sizovaite@stud.kitm.lt was not a respondent;\",);\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(expectedUserEmail + \" was not a respondent;\",);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"nusasmeninta1.kitm.lt nusasmeninta2.kitm.lt nusasmeninta3@stud.kitm.lt nusasmeninta4@stud.kitm.lt nusasmeninta5@stud.kitm.lt nusasmeninta6@stud.kitm.lt nusasmeninta7@stud.kitm.lt nusasmeninta8@stud.kitm.lt survery.admin@kitm.lt\",\r\n    \"nusasmeninta1.kitm.lt, nusasmeninta2.kitm.lt, nusasmeninta3@stud.kitm.lt, nusasmeninta4@stud.kitm.lt, nusasmeninta5@stud.kitm.lt, nusasmeninta6@stud.kitm.lt, nusasmeninta7@stud.kitm.lt, nusasmeninta8@stud.kitm.lt, survery.admin@kitm.lt\",\r\n    \"badEmail02@subdomain.com\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + other user's survey (as admin) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas yra \"All listed respondents added\":\r",
									"pm.test(\"4. Gaunamas tinkamas prasnešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"    pm.expect(responseData.data.addedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + other user's survey (as admin) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas pranesimas kad respondentai pasalinti kiek repondentu liko ir kiek istryne\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents deleted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents deleted\",);\r",
									"    pm.expect(responseData.data.currentCount).to.eql(0);\r",
									"    pm.expect(responseData.data.currentRespondents).to.eql([])\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent - [] (as admin) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Pranešimo statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\", \"The response status should be 'failed' or 'Failed'.\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Validation failed: questions.0.type: Please enter your survey input\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Please provide respondent emails to delete'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Please provide respondent emails to delete\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available - bad token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available - no token (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - bad token {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - no token (public) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - bad token {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - no token (public) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent - bad token {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent - no token (public) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add respondents while state is new - other roles NEW",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(4);\r",
									"    pm.expect(responseData.data.addedCount).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent+ (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas pranesimas kad respondentai pasalinti kiek repondentu liko ir kiek istryne\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents deleted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents deleted\",);\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas geras pranešimas kad respondentu nera ir masyvas tuscias:\r",
									"pm.test(\"4. Gaunamas teisingas respondentų sąrašas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"    pm.expect(responseData.data.currentRespondents).to.eql([pm.collectionVariables.get(\"AdminElP\"),\r",
									"            pm.collectionVariables.get(\"EmplElP\")]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -!  other user's survey (as empl) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! other user's survey (as empl) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! other user's survey (as empl) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId3}} not in results-new (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// `{{newSurveyId}}` nėra tarp atvaizduotų apklausų:\r",
									"pm.test(\"4. Apklausos 'newSurveyId3' nėra tarp atvaizduotų apklausų.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyIds = responseData.data.surveys.map(survey => survey._id);\r",
									"    let isNewSurveyIdIncluded = surveyIds.includes(pm.globals.get(\"newSurveyId3\"));\r",
									"\r",
									"    // Tikrinti, kad `{{newSurveyId}}` nėra tarp grąžintų apklausų ID\r",
									"    pm.expect(isNewSurveyIdIncluded).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId3}} not in results+new (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// `{{newSurveyId}}` nėra tarp atvaizduotų apklausų:\r",
									"pm.test(\"4. Apklausos 'newSurveyId3' nėra tarp grąžintų apklausų.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyIds = responseData.data.surveys.map(survey => survey._id);\r",
									"    let isNewSurveyIdIncluded = surveyIds.includes(pm.globals.get(\"newSurveyId3\"));\r",
									"\r",
									"    // Tikrinti, kad `{{newSurveyId}}` nėra tarp grąžintų apklausų ID\r",
									"    pm.expect(isNewSurveyIdIncluded).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Change state of the survey - admin NEW",
			"item": [
				{
					"name": "surveys/:surveyID/close - new  (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"// Tinkamas klaidos pranešimas - \"Action was not allowed for this survey due to its state\":\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  + (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\", \"The response message should be 'Survey state has been updated'.\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\", \"The survey state should be 'active'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  - active (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed -! embeddable false+active (public) {{{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Embedding is not allowed for this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Embedding is not allowed for this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! state is active (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas  'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  - no respondents (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey needs to be embeddable or have respondents for this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey needs to be embeddable or have respondents for this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close +  (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\", \"The survey state should be 'closed'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close - closed  (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  - closed (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"survery.user@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  - closed (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed -! embeddable false+closed (public) {{{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Embedding is not allowed for this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Embedding is not allowed for this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! state is closed (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas  'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos apklausa atnaujinta\",\r\n  \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Pirmas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"answers\" : [\"Atskymas b\", \"Atskymas bb atnaujinta\", \"Atskymas bbb\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Antras klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"answers\" : [\"Atskymas cc atnaujinta\", \"Atskymas ccc\", \"Atskymas ccc\"]\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Trecias klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"text\"\r\n\t\t},\r\n        \t\t{\r\n\t\t\t\"label\" : \"Ketvirtas klausimas? atnaujinta\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"answers\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newSurveyId4}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  + other user's survey (as admin) {{newSurveyId4}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\", \"The survey state should be 'active'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close +  other user's survey (as admin) {{newSurveyId4}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\", \"The survey state should be 'closed'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  - bad token {{newSurveyId4}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  - no token (public) {{newSurveyId4}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close  - bad token {{newSurveyId4}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "123",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close  - no token (public {{newSurveyId4}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.expect(pm.response.to.have.status(401)); // arba 403, priklausomai nuo API logikos\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId4}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Change state of the survey - other roles NEW",
			"item": [
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close  -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Statuso pranešimas yra teisingas 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  -! (as admin) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Statuso pranešimas yra teisingas 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  + (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\", \"The survey state should be 'active'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close  + (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\", \"The survey state should be 'closed'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newSurveyId2}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close  -! other user's survey+new  (as empl) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Statuso pranešimas yra teisingas 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  -!  other user's survey+new (as empl) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add respondents while state is active - admin NEW",
			"item": [
				{
					"name": "surveys/available/:surveyID - not respondent in a survey-new {{newSurveyId2}} (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'This person is not a respondent for this survey'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"This person is not a respondent for this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUBLISH --> {{newSurveyId2}}+  (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\", \"The survey state should be 'active'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available/:surveyID - not respondent in a survey-active {{newSurveyId2}} (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'This person is not a respondent for this survey'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"This person is not a respondent for this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + active (as admin) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId2}} found in results+active (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar globalus kintamasis `{{newSurveyId2}}` yra tarp grąžintų apklausų ir \"isAnswered\": false:\r",
									"pm.test(\"4. Apklausa 'newSurveyId2' randama tarp atvaizduotų apklausų _id ir yra neatsakyta.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveys;\r",
									"    let newSurveyId2 = pm.globals.get(\"newSurveyId2\");\r",
									"    let foundSurvey = surveys.find(survey => survey._id === newSurveyId2);\r",
									"\r",
									"    // Patikriname, ar newSurveyId2 yra tarp grąžintų _id ir ar šios apklausos 'isAnswered' yra false\r",
									"    pm.expect(foundSurvey, `Survey with ID ${newSurveyId2} should be found.`).to.not.be.undefined;\r",
									"    pm.expect(foundSurvey.isAnswered, \"Survey should not be answered (isAnswered should be false).\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available/:surveyID + respondent in a survey {{newSurveyId2}} (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžintos apklausos id atitinka globalų kinamąjį 'newSurveyId2'\r",
									"pm.test(\"Grąžintos apklausos '_id' atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let response = pm.response.json(); // Gaunamas JSON atsakymas iš serverio\r",
									"    let surveyId = response.data.survey._id; // Gaunamas '_id' iš atsakymo\r",
									"    let expectedId = pm.globals.get(\"newSurveyId2\"); // Gaunamas globalus kintamasis 'newSurveyId2'\r",
									"\r",
									"    // Tikrinama, ar '_id' yra lygus globaliam kintamajam\r",
									"    pm.expect(surveyId).to.eql(expectedId, \"Gautas '_id' nesutampa su globaliu kintamuoju 'newSurveyId2'\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent -! active (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta2@stud.kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Add respondents while state is active - other roles NEW",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId2}} found in results+active (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar globalus kintamasis `{{newSurveyId2}}` yra tarp grąžintų apklausų ir \"isAnswered\": false:\r",
									"pm.test(\"4. Apklausa 'newSurveyId2' randama tarp atvaizduotų apklausų _id ir yra neatsakyta.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveys;\r",
									"    let newSurveyId2 = pm.globals.get(\"newSurveyId2\");\r",
									"    let foundSurvey = surveys.find(survey => survey._id === newSurveyId2);\r",
									"\r",
									"    // Patikriname, ar newSurveyId2 yra tarp grąžintų _id ir ar šios apklausos 'isAnswered' yra false\r",
									"    pm.expect(foundSurvey, `Survey with ID ${newSurveyId2} should be found.`).to.not.be.undefined;\r",
									"    pm.expect(foundSurvey.isAnswered, \"Survey should not be answered (isAnswered should be false).\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE survey --> {{newSurveyId5}}+C (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas :\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"5. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId5'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId5 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId5\", newSurveyId5);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId5);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Dienos įpročiai (by employee)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\" : [\r\n\t\t{\r\n\t\t\t\"label\" : \"Koks yra jūsų mėgstamiausias pusryčių patiekalas?\",\r\n\t\t\t\"type\" : \"radio\",\r\n\t\t\t\"options\" : [\"Avižiniai\", \"Braškių blynai\", \"Kiaušiniai\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kiekvieną dieną pusryčiams geriate?\",\r\n\t\t\t\"type\" : \"checkbox\",\r\n\t\t\t\"options\" : [\"Kavą\", \"Arbatą\", \"Sultis\", \"Vandenį\"]\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Kiek valandų miegate per naktį?\",\r\n\t\t\t\"type\" : \"text\",\r\n\t\t\t\"options\" : []\r\n\t\t},\r\n        {\r\n\t\t\t\"label\" : \"Papildykite savo kasdienio gyvenimo įpročius\",\r\n\t\t\t\"type\" : \"textarea\",\r\n\t\t\t\"options\" : []\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newSurveyId5}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUBLISH --> {{newSurveyId5}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  + active invalid+valid (as empl) {{newSurveyId5}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymas 'Some listed respondents added' ir teisingai nurodytas pridėtų ir ignoruojamų respondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedEmail = pm.collectionVariables.get('EmplElP')\r",
									"\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents added\")\r",
									"    pm.expect(responseData.data.warrningMessage).to.eql(expectedEmail +\" already added; \");\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId5}} found in results+active (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar globalus kintamasis `{{newSurveyId5}}` yra tarp grąžintų apklausų:\r",
									"pm.test(\"4. Apklausa 'newSurveyId5' randama tarp atvaizduotų apklausų _id ir yra neatsakyta.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveys;\r",
									"    let newSurveyId5 = pm.globals.get(\"newSurveyId5\");\r",
									"    let foundSurvey = surveys.find(survey => survey._id === newSurveyId5);\r",
									"\r",
									"    // Patikriname, ar newSurveyId5 yra tarp grąžintų _id ir ar šios apklausos 'isAnswered' yra false\r",
									"    pm.expect(foundSurvey, `Survey with ID ${newSurveyId5} should be found.`).to.not.be.undefined;\r",
									"    pm.expect(foundSurvey.isAnswered, \"Survey should not be answered (isAnswered should be false).\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent -! active (as empl) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE survey --> {{newSurveyId6}}+C (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas :\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"5. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId6'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId6 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId6\", newSurveyId6);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"IT Dienos Apklausa (by employee)\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Koks yra jūsų mėgstamiausias programavimo kalbos?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Python\", \"JavaScript\", \"Java\", \"C++\", \"C#\", \"Swift\", \"Ruby\"]\r\n        },\r\n        {\r\n            \"label\": \"Kurį tinklalapį dažniausiai lankote IT naujienoms?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Stack Overflow\", \"GitHub\", \"Reddit\", \"Hacker News\", \"Dev.to\", \"Medium\", \"TechCrunch\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokia operacinė sistema naudojate?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Windows\", \"MacOS\", \"Linux\", \"Chrome OS\", \"Other\"]\r\n        },\r\n        {\r\n            \"label\": \"Kiek valandų per dieną paprastai skiriate programavimui arba IT temoms?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kokias programų kūrimo priemones dažniausiai naudojate?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Visual Studio Code\", \"IntelliJ IDEA\", \"Eclipse\", \"Xcode\", \"PyCharm\", \"Atom\", \"Sublime Text\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokie yra jūsų pagrindiniai IT susijungimai socialiniuose tinkluose?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"LinkedIn\", \"Twitter\", \"Facebook\", \"Instagram\", \"Reddit\", \"Stack Overflow\", \"GitHub\"]\r\n        },\r\n        {\r\n            \"label\": \"Papildomai, jei norite pasidalinti, kokie yra jūsų ateities projektų planai ar idėjos IT srityje?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newSurveyId6}}+ (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUBLISH --> {{newSurveyId6}}+ (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! (as user) {{newSurveyId6}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent  -! (as user) {{newSurveyId6}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"nuasmeninta2@stud.kitm.lt\",\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/available + {{newSurveyId6}} found in results+active (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar globalus kintamasis `{{newSurveyId6}}` yra tarp grąžintų apklausų:\r",
									"pm.test(\"4. Apklausa 'newSurveyId6' randama tarp atvaizduotų apklausų _id ir yra neatsakyta.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveys = responseData.data.surveys;\r",
									"    let newSurveyId6 = pm.globals.get(\"newSurveyId6\");\r",
									"    let foundSurvey = surveys.find(survey => survey._id === newSurveyId6);\r",
									"\r",
									"    // Patikriname, ar newSurveyId6 yra tarp grąžintų _id ir ar šios apklausos 'isAnswered' yra false\r",
									"    pm.expect(foundSurvey, `Survey with ID ${newSurveyId6} should be found.`).to.not.be.undefined;\r",
									"    pm.expect(foundSurvey.isAnswered, \"Survey should not be answered (isAnswered should be false).\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent -! (as user) {{newSurveyId6}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Submit answers - admin NEW",
			"item": [
				{
					"name": "surveys/:surveyID/fill  - not a respondent (as admin) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'This person is not a respondent for this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.be.eql('This person is not a respondent for this survey');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1,5],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - closed (as admin) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - empty answers (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Geras pranešimas, kad pateiktų atsakymų kiekis nesutampa su reikiamu:\r",
									"pm.test(\"5. Gaunamas tinkamas pranešimas dėl neteisingo pateiktų atsakymų kiekio 'invalid answers length'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"invalid answers length\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - {} (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Geras pranešimas, kad pateiktų atsakymų kiekis nesutampa su reikiamu:\r",
									"pm.test(\"5. Gaunamas tinkamas pranešimas dėl neteisingo pateiktų atsakymų kiekio 'invalid answers length'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"invalid answers length\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad key (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Geras pranešimas, kad pateiktų atsakymų kiekis nesutampa su reikiamu:\r",
									"pm.test(\"5. Gaunamas tinkamas pranešimas dėl neteisingo pateiktų atsakymų kiekio 'invalid answers length'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"invalid answers length\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answer\":[\r\n        1, \r\n        2,\r\n        [0,1],\r\n        [0,1],\r\n        \"my text answer 1\",\r\n        \"my text answer 2\",\r\n        \"my textarea answer 1\",\r\n        \"my textarea answer 2\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad body (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": {\r\n    \"0\": 1,\r\n    \"1\": 1,\r\n    \"2\": [0, 1],\r\n    \"3\": [0, 1],\r\n    \"4\": \"my text answer\",\r\n    \"5\": \"my text answer\",\r\n    \"6\": \"my textarea answer\",\r\n    \"7\": \"my textarea answer\"\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - answers out of range (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Identifikuoti teisingi klaidinų atsakymų indeksai:\r",
									"pm.test(\"5. Tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"0,1,2,3\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    999,\r\n    -999,\r\n    [999, 998],\r\n    [-999, -998],\r\n    \"my text answer 1\",\r\n    \"my text answer 2\",\r\n    \"my textarea answer 1\",\r\n    \"my textarea answer 2\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad type (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Identifikuoti teisingi klaidinų atsakymų indeksai:\r",
									"pm.test(\"5. Tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"0,1,2,3,4,5,6,7\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    \"should be number\",\r\n    [\"should be numbers\"],\r\n    \"should be number\",\r\n    [\"should be numbers\"],\r\n    12345,\r\n    67890,\r\n    -12345,\r\n    -67890\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad type 2 (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Identifikuoti teisingi klaidinų atsakymų indeksai:\r",
									"pm.test(\"5. Tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"0,1,2,3,4,5,6,7\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    \"text\", \r\n    {\"not\": \"array\"}, \r\n    \"text\", \r\n    {\"not\": \"array\"},\r\n    false, \r\n    {\"not\": \"array\"}, \r\n    false, \r\n    {\"not\": \"array\"}\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad type 3 (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Identifikuoti teisingi klaidinų atsakymų indeksai:\r",
									"pm.test(\"5. Tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"1,3,4,6\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2, \r\n    false, \r\n    [0,1], \r\n    false, \r\n    [\"bad type\"], \r\n    \"my text answer\",\r\n    [\"bad type\"], \r\n    \"my textarea answer\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - empty null (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers' ir tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Identifikuoti teisingi klaidinų atsakymų indeksai:\r",
									"pm.test(\"5. Tinkamai nurodyti klaidingų atsakymų indeksai.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"0,1,2,3,4,5,6,7\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    null,\r\n    [],\r\n    null,\r\n    [],\r\n    \"\",\r\n    null,\r\n    null,\r\n    \"\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - too many answers (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid answers'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Invalid answers\");\r",
									"});\r",
									"//Geras pranešimas, kad pateiktų atsakymų kiekis nesutampa su reikiamu:\r",
									"pm.test(\"5. Gaunamas tinkamas pranešimas dėl neteisingo pateiktų atsakymų kiekio 'invalid answers length'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.indexes).to.eql(\"invalid answers length\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        [0,1,5], \r\n        \"my textarea answer\",\r\n        [0,1,5],\r\n        \"my text answer\",\r\n        \"my textarea answer\",\r\n        [0,1,5], \r\n        \"my textarea answer\",\r\n        [0,1,5], \r\n        \"my textarea answer\",\r\n        [0,1,5], \r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + empty array (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas tinkamas pranešimas 'Survey answers found' ir tikrinama, ar atsakymų masyvas yra tuščias\r",
									"pm.test(\"4. Gaunamas pranešimas 'Survey answers found' ir tuščias atsakymų masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"    pm.expect(responseData.data.count).to.eql(0);\r",
									"    pm.expect(responseData.data.submittedAnswers, \"Answers array should be empty when no responses are present.\").to.be.empty;\r",
									"});\r",
									"//Ar surveyID atitinka globalų kintamąjį {{newSurveyId2}}\r",
									"pm.test(\"5. Grąžinto SurveyID atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"\r",
									"    // Patikriname, ar surveyID atitinka expectedSurveyId\r",
									"    pm.expect(responseData.data.surveyID).to.eql(expectedSurveyId, `Survey ID should match the expected survey ID ${expectedSurveyId}.`);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID + answers count=0 (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tikrinama, ar žinutės laukas yra teisingas:\r",
									"pm.test(\"4. Žinutės lauko reikšmė yra teisinga: 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\", \"The response message should be 'Survey found'.\");\r",
									"});\r",
									"// Tikrinama, ar atsakymų skaičius yra lygus 0\r",
									"pm.test(\"5. Atsakymų į apklausą skaičius yra 0.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  + (as admin) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});\r",
									"// Patikrina, kad surveyID atitinka global kintamąjį {{newSurveyId2}}\r",
									"pm.test(\"5. `surveyID` atitinka globalų kintamąjį 'newSurveyId2'\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"    pm.expect(responseData.data.answer.surveyID).to.eql(expectedSurveyId);\r",
									"});\r",
									"// Patikrina, kad respondentID atitinka global kintamąjį {{adminId}}\r",
									"pm.test(\"6. `respondentID` atitinka globalų kintamąjį 'adminId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedUserId = pm.globals.get(\"adminId\");\r",
									"    pm.expect(responseData.data.answer.respondentID).to.eql(expectedUserId);\r",
									"});\r",
									"// Patikrina, kad atsakymai atitinka pateiktus duomenis\r",
									"pm.test(\"7. Įrašyti atsakymai atitinka įvesties duomenis ir išsaugomas atsakymų 'answersId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedAnswers = [\r",
									"        1,\r",
									"        2,\r",
									"        [0, 1],\r",
									"        [2],\r",
									"        \"my text answer: labai unikalus tekstas 12345 (by admin)\",\r",
									"        \"my text answer: labai unikalus tekstas 54321 (by admin)\",\r",
									"        \"my textarea answer: labai unikalus tekstas 12345 (by admin)\",\r",
									"        \"my textarea answer: labai unikalus tekstas 54321 (by admin)\"\r",
									"    ];\r",
									"    \r",
									"    // Šis testas palygina du masyvus. Jei reikia griežtesnio tipo palyginimo, galima modifikuoti.\r",
									"    pm.expect(responseData.data.answer.answers).to.eql(expectedAnswers, \"The provided answers do not match the expected format.\");\r",
									"});\r",
									"// Išsaugo atsakymo _id į globalų kintamąjį 'answersId'\r",
									"pm.test(\"8. Atsakymo ID `_id` išsaugomas kaip globalus kintamasis 'answersId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let answerId = responseData.data.answer._id;\r",
									"    \r",
									"    // Išsaugome _id į globalų kintamąjį\r",
									"    pm.globals.set(\"answersId\", answerId);\r",
									"\r",
									"    // Patikriname ar _id išsaugotas teisingai\r",
									"    pm.expect(pm.globals.get(\"answersId\")).to.eql(answerId, \"Answer ID should be saved correctly in global variable.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        2,\r\n        [0,1],\r\n        [2],\r\n        \"my text answer: labai unikalus tekstas 12345 (by admin)\",\r\n        \"my text answer: labai unikalus tekstas 54321 (by admin)\",\r\n        \"my textarea answer: labai unikalus tekstas 12345 (by admin)\",\r\n        \"my textarea answer: labai unikalus tekstas 54321 (by admin)\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - already answered (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 409 'Conflict'.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Answer to survey already submitted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer to survey already submitted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        2,\r\n        [0,1],\r\n        [2],\r\n        \"my text answer: labai unikalus tekstas 12345 (by admin) 2\",\r\n        \"my text answer: labai unikalus tekstas 54321 (by admin) 2\",\r\n        \"my textarea answer: labai unikalus tekstas 12345 (by admin) 2\",\r\n        \"my textarea answer: labai unikalus tekstas 54321 (by admin) 2\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + filled answers found (as admin) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"});\r",
									"// Patikrinti, kad answersId nėra randamas atsakyme\r",
									"pm.test(\"5. Pildant apklausą gautas 'answersId' nėra randamas grąžintame atsakyme.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let savedAnswerId = pm.globals.get(\"answersId\");\r",
									"\r",
									"    // Tikriname, kad savedAnswerId nėra atsakymuose\r",
									"    pm.expect(responseData.data.submittedAnswers.map(answer => answer._id).includes(savedAnswerId)).to.be.false;\r",
									"});\r",
									"//Patikrinti, kad surveyID atitinka newSurveyId2\r",
									"pm.test(\"6. SurveyID atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"\r",
									"    // Tikriname, ar surveyID atitinka išsaugotą globalų kintamąjį\r",
									"    pm.expect(responseData.data.surveyID).to.eql(expectedSurveyId);\r",
									"});\r",
									"//Patikrinti, kad adminId nesimato atsakymuose ir kad atsakymai atitinka pateiktus duomenis\r",
									"pm.test(\"7. Anksčiau pateikti atsakymai yra teisingai issaugoti, bet respondemntas 'adminId' nėra atvaizduojamas atsakyme .\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedAnswers = [\r",
									"        1,\r",
									"        2,\r",
									"        [0, 1],\r",
									"        [2],\r",
									"        \"my text answer: labai unikalus tekstas 12345 (by admin)\",\r",
									"        \"my text answer: labai unikalus tekstas 54321 (by admin)\",\r",
									"        \"my textarea answer: labai unikalus tekstas 12345 (by admin)\",\r",
									"        \"my textarea answer: labai unikalus tekstas 54321 (by admin)\"\r",
									"    ];\r",
									"\r",
									"    // Tikriname, ar atsakymai atitinka lūkesčius\r",
									"    pm.expect(responseData.data.submittedAnswers[0].answer).to.eql(expectedAnswers);\r",
									"\r",
									"    // Patikriname, kad adminId nerandamas atsakymuose\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let hasAdminId = JSON.stringify(responseData.data.submittedAnswers).includes(adminId);\r",
									"    pm.expect(hasAdminId, \"Admin ID neturėtų būti matomas atsakymuose.\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers - bad id (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Non-existent user'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers -invalid id (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found'.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "000000000000000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE survey --> {{newSurveyId7}}+C (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"5. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId7'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId7\", newSurveyId);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newSurveyId7}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{EmplElP}}\",\r\n    \"{{AdminElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - new (as admin) {{newSurveyId7}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers - bad token {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers - no token (public) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad token {{newSurveyId7}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - no token (public) {{newSurveyId7}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Submit answers - other roles NEW",
			"item": [
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - new (as user) {{newSurveyId7}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - closed (as user) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/surveys/:surveyID/fill  + (as user) {{newSurveyId5}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});\r",
									"// Patikrina, kad surveyID atitinka global kintamąjį {{newSurveyId5}}\r",
									"pm.test(\"5. `surveyID` atitinka globalų kintamąjį 'newSurveyId5'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId5\");\r",
									"    pm.expect(responseData.data.answer.surveyID).to.eql(expectedSurveyId);\r",
									"});\r",
									"// Patikrina, kad respondentID atitinka global kintamąjį {{employeeId}}\r",
									"pm.test(\"6. `respondentID` atitinka globalų kintamąjį 'employeeId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedUserId = pm.globals.get(\"employeeId\");\r",
									"    pm.expect(responseData.data.answer.respondentID).to.eql(expectedUserId);\r",
									"});\r",
									"// Patikrina, kad atsakymai atitinka pateiktus duomenis\r",
									"pm.test(\"7. Įrašyti atsakymai atitinka įvesties duomenis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedAnswers = [1, [0, 1, 2], \"my text answer: Pats unikaliausias atsakymas -9999 (by user)\", \"my textarea answer: Pats unikaliausias atsakymas 9999- (by user)\"];\r",
									"    \r",
									"    // Šis testas palygina du masyvus. Jei reikia griežtesnio tipo palyginimo, galima modifikuoti.\r",
									"    pm.expect(responseData.data.answer.answers).to.eql(expectedAnswers);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1,2],\r\n        \"my text answer: Pats unikaliausias atsakymas -9999 (by user)\",\r\n        \"my textarea answer: Pats unikaliausias atsakymas 9999- (by user)\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - already answered (as empl) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 409 'Conflict'.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Answer to survey already submitted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer to survey already submitted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers -!  (as user) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers -! other user's survey (as user) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - new (as employee) {{newSurveyId7}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUBLISH --> {{newSurveyId7}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - closed (as employee) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        [0,1],\r\n        \"my text answer\",\r\n        \"my textarea answer\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/surveys/:surveyID/fill  + (as empl) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});\r",
									"//Patikrinimas, kad surveyID atitinka globalų kintamąjį {{newSurveyId2}}:\r",
									"pm.test(\"5. `surveyID` atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"    pm.expect(responseData.data.answer.surveyID).to.eql(expectedSurveyId, \"SurveyID does not match the expected global variable.\");\r",
									"});\r",
									"//Patikrinimas, kad respondentID atitinka globalų kintamąjį {{employeeId}}:\r",
									"pm.test(\"6. `respondentID` atitinka globalų kintamąjį 'employeeId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedUserId = pm.globals.get(\"employeeId\");\r",
									"    pm.expect(responseData.data.answer.respondentID).to.eql(expectedUserId, \"RespondentID does not match the expected global variable.\");\r",
									"});\r",
									"// Patikrinimas, kad atsakymai atitinka pateiktus duomenis:\r",
									"pm.test(\"7. Įrašyti atsakymai atitinka įvesties duomenis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedAnswers = [\r",
									"        1,\r",
									"        2,\r",
									"        [0, 1],\r",
									"        [2],\r",
									"        \"my text answer: be galo unikalus tekstas 0000 (by employee)\",\r",
									"        \"my text answer: be galo unikalus tekstas 9999 (by employee)\",\r",
									"        \"my textarea answer: be galo unikalus tekstas 0000 (by employee)\",\r",
									"        \"my textarea answer: be galo unikalus tekstas 9999 (by employee)\"\r",
									"    ];\r",
									"\r",
									"    // Tikrinimas, ar pateikti atsakymai atitinka tikėtus\r",
									"    pm.expect(responseData.data.answer.answers).to.eql(expectedAnswers, \"Provided answers do not match the expected input data.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        2,\r\n        [0,1],\r\n        [2],\r\n        \"my text answer: be galo unikalus tekstas 0000 (by employee)\",\r\n        \"my text answer: be galo unikalus tekstas 9999 (by employee)\",\r\n        \"my textarea answer: be galo unikalus tekstas 0000 (by employee)\",\r\n        \"my textarea answer: be galo unikalus tekstas 9999 (by employee)\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - already answered (as empl) {{newSurveyId2}} !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 409 'Conflict'.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Answer to survey already submitted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer to survey already submitted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\":[\r\n        1,\r\n        2,\r\n        [0,1],\r\n        [2],\r\n        \"my text answer: be galo unikalus tekstas 0000 (by employee)\",\r\n        \"my text answer: be galo unikalus tekstas 9999 (by employee)\",\r\n        \"my textarea answer: be galo unikalus tekstas 0000 (by employee)\"\r\n\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID + answers count=2 (as admin) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Tikrinama, ar žinutės laukas yra teisingas:\r",
									"pm.test(\"4. Žinutės lauko reikšmė yra teisinga: 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\", \"The response message should be 'Survey found'.\");\r",
									"});\r",
									"// Tikrinama, ar atsakymų skaičius yra lygus 1\r",
									"pm.test(\"5. Atsakymų į apklausą skaičius yra teisingas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(2);\r",
									"});\r",
									"//Patikrinti, ar kiekvieno klausimo atsakymai yra tinkamai agreguoti\r",
									"pm.test(\"6. Kiekvieno klausimo atsakymai yra tinkamai agreguoti.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let questions = responseData.data.surveyData.questions;\r",
									"    questions.forEach(question => {\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            // Tikriname ar kiekvieno pasirinkimo skaičius yra teisingas\r",
									"            question.options.forEach((option, index) => {\r",
									"                pm.expect(question.answers[index]).to.be.a('number');\r",
									"            });\r",
									"        } else if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            // Tikriname, ar tekstinių atsakymų masyvas yra teisingas\r",
									"            pm.expect(question.answers).to.be.an('array').and.to.have.lengthOf(2);\r",
									"            question.answers.forEach(answer => {\r",
									"                pm.expect(answer).to.be.a('string');\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									"// Testas, kuris tikrina ar atsakymų kiekis yra teisingas pagal 'answerCount' ir klausimo tipą\r",
									"pm.test(\"7. Atsakymų kiekis pagal 'answerCount' ir klausimo tipą\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let questions = responseData.data.surveyData.questions;\r",
									"    let answerCount = responseData.data.surveyData.answerCount;\r",
									"\r",
									"    questions.forEach(question => {\r",
									"        if (question.type === \"radio\") {\r",
									"            // Radio tipo klausimai turėtų turėti atsakymų sumą lygią 'answerCount'\r",
									"            let totalAnswers = question.answers.reduce((sum, current) => sum + current, 0);\r",
									"            pm.expect(totalAnswers, `Klausimo '${question.label}' atsakymų suma turėtų būti lygi 'answerCount'`).to.eql(answerCount);\r",
									"        } else if (question.type === \"checkbox\") {\r",
									"            // Checkbox tipo klausimai turėtų turėti atsakymų sumą lygią arba didesnę už 'answerCount'\r",
									"            let totalAnswers = question.answers.reduce((sum, current) => sum + current, 0);\r",
									"            pm.expect(totalAnswers, `Checkbox tipo klausimo '${question.label}' atsakymų suma turėtų būti lygi arba didesnė už 'answerCount'`).to.be.at.least(answerCount);\r",
									"        } else if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            // Text ir Textarea tipo klausimai turėtų turėti atsakymų skaičių lygų 'answerCount'\r",
									"            pm.expect(question.answers.length, `Klausimo '${question.label}' atsakymų skaičius turėtų būti lygus 'answerCount'`).to.eql(answerCount);\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/all +  {{newSurveyId2}}+ has 4 respondents, 2 answers (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All surveys found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All surveys found\");\r",
									"});\r",
									"//Ieskome newSurveyId2 ir tikriname ar atvaizduoti tinkamai respondentai ir atsakymai\r",
									"pm.test(\"Apklausai 'newSurveyId2' yra atvaizduoti 4 'respondents' ir 2 'submittedAnswers'.\", function () {\r",
									"    let responseData = pm.response.json(); // Paimamas JSON atsakymas iš serverio\r",
									"    let surveyId = pm.globals.get(\"newSurveyId2\"); // Paimamas globalus kintamasis\r",
									"    let surveyFound = responseData.data.surveyData.find(survey => survey._id === surveyId);\r",
									"\r",
									"    // Tikriname, ar tokia apklausa buvo rasta\r",
									"    pm.expect(surveyFound, \"Nerasta apklausa su nurodytu _id\").to.not.be.undefined;\r",
									"\r",
									"    // Tikriname, ar rastos apklausos respondents ir submittedAnswers yra lygūs 2\r",
									"    pm.expect(surveyFound.respondents, \"Respondentų skaičius nėra lygus 4\").to.eql(4);\r",
									"    pm.expect(surveyFound.submittedAnswers, \"Pateiktų atsakymų skaičius nėra lygus 2\").to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/all?limit=20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "53",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/mine +  {{newSurveyId2}}+ has 4 respondents, 2 answers (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Current user surveys found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Current user surveys found\");\r",
									"});\r",
									"//Ieskome newSurveyId2 ir tikriname ar atvaizduoti tinkamai respondentai ir atsakymai\r",
									"pm.test(\"Apklausai 'newSurveyId2' yra atvaizduoti 4 'respondents' ir 2 'submittedAnswers'.\", function () {\r",
									"    let responseData = pm.response.json(); // Paimamas JSON atsakymas iš serverio\r",
									"    let surveyId = pm.globals.get(\"newSurveyId2\"); // Paimamas globalus kintamasis\r",
									"    let surveyFound = responseData.data.surveyData.find(survey => survey._id === surveyId);\r",
									"\r",
									"    // Tikriname, ar tokia apklausa buvo rasta\r",
									"    pm.expect(surveyFound, \"Nerasta apklausa su nurodytu _id\").to.not.be.undefined;\r",
									"\r",
									"    // Tikriname, ar rastos apklausos respondents ir tedAnswers yra lygūs nurodytiems skaičiams\r",
									"    pm.expect(surveyFound.respondents, \"Respondentų skaičius nėra lygus 4\").to.eql(4);\r",
									"    pm.expect(surveyFound.submittedAnswers, \"Pateiktų atsakymų skaičius nėra lygus 2\").to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/mine",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								"mine"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers -! other user's survey (as employee) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + active (as employee) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"});\r",
									"//Patikrinti, kad surveyID atitinka newSurveyId5\r",
									"pm.test(\"5. SurveyID atitinka globalų kintamąjį 'newSurveyId5'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId5\");\r",
									"\r",
									"    // Tikriname, ar surveyID atitinka išsaugotą globalų kintamąjį\r",
									"    pm.expect(responseData.data.surveyID).to.eql(expectedSurveyId);\r",
									"});\r",
									"//Patikrinti, kad employeeId nesimato atsakymuose ir kad atsakymai atitinka pateiktus duomenis\r",
									"pm.test(\"6. Anksčiau pateikti atsakymai yra teisingai išsaugoti, bet respondemntas 'employeeId' nėra atvaizduojamas atsakyme .\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedAnswers = [\r",
									"        1,\r",
									"        [0,1,2],\r",
									"        \"my text answer: Pats unikaliausias atsakymas -9999 (by user)\",\r",
									"        \"my textarea answer: Pats unikaliausias atsakymas 9999- (by user)\"\r",
									"    ];\r",
									"\r",
									"    // Tikriname, ar atsakymai atitinka lūkesčius\r",
									"    pm.expect(responseData.data.submittedAnswers[0].answer).to.eql(expectedAnswers);\r",
									"\r",
									"    // Patikriname, kad adminId nerandamas atsakymuose\r",
									"    let adminId = pm.globals.get(\"employeeId\");\r",
									"    let hasAdminId = JSON.stringify(responseData.data.submittedAnswers).includes(adminId);\r",
									"    pm.expect(hasAdminId, \"User ID neturėtų būti matomas atsakymuose.\").to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + active (as admin) {{newSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"});\r",
									"// Tikriname, ar surveyID atitinka globalų kintamąjį 'newSurveyId2'\r",
									"pm.test(\"5. `surveyID` atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"    pm.expect(responseData.data.surveyID).to.eql(expectedSurveyId);\r",
									"});\r",
									"// Patikriname, ar atsakymų skaičius atitinka pateiktą skaičių 'count'\r",
									"pm.test(\"6. Atsakymų skaičius yra teisingas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.submittedAnswers.length).to.eql(responseData.data.count);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + other user's survey+active (as admin) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close + answered {{newSurveyId2}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\", \"The survey state should be 'closed'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/answers + closed (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey answers found\");\r",
									"});\r",
									"// Tikriname, ar surveyID atitinka globalų kintamąjį 'newSurveyId2'\r",
									"pm.test(\"5. `surveyID` atitinka globalų kintamąjį 'newSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let expectedSurveyId = pm.globals.get(\"newSurveyId2\");\r",
									"    pm.expect(responseData.data.surveyID).to.eql(expectedSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/answers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"answers"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Embeddable survey - admin",
			"item": [
				{
					"name": "CREATE embeddable survey --> {{newEmbeddableSurveyId}}+C (as admn)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"5. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra true).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.true;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"6. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newEmbeddableSurveyId'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newEmbeddableSurveyId = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newEmbeddableSurveyId\", newEmbeddableSurveyId);\r",
									"    console.log(\"New survey ID saved to globals:\", newEmbeddableSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"true\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - new (as admin) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,\r\n    1,\r\n    [0, 2, 4],\r\n    3,\r\n    [0, 3],\r\n    4,\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",\r\n    0,\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + {{newEmbeddableSurveyId}} (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed +! no token +new (public) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"Survey found\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\");\r",
									"});\r",
									"// Patikrina, ar gautame atsakyme yra visa reikalinga informacija jos atvaizdavimui ir ar ji tinkama.\r",
									"pm.test(\"5. Gautame atsakyme '_id' atitinka 'newEmbeddableSurveyId', apklausos būsena yra 'new' ir pateikiamavisa reikalinga informacija, apklausos atvaizdavimui.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    \r",
									"    // Patikrina, ar yra visi reikalingi raktai ir jie nėra tušti\r",
									"    pm.expect(surveyData).to.have.keys(\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"state\",\r",
									"        \"questions\",\r",
									"        \"isEmbeddable\"\r",
									"    );\r",
									"    pm.expect(surveyData._id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.state).to.be.eql('new'); \r",
									"    pm.expect(surveyData.questions).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.isEmbeddable).to.be.a('boolean');\r",
									"\r",
									"    // Patikrina, ar _id atitinka globalų kintamąjį 'newEmbeddableSurveyId'\r",
									"    pm.expect(surveyData._id).to.eql(pm.globals.get(\"newEmbeddableSurveyId\"));\r",
									"});\r",
									"\r",
									"// Patikrina, ar atsakyme nėra adminId:\r",
									"function checkForValue(obj, value) {\r",
									"    if (Array.isArray(obj)) {\r",
									"        return obj.some(item => checkForValue(item, value));\r",
									"    } else if (typeof obj === 'object' && obj !== null) {\r",
									"        return Object.values(obj).some(item => checkForValue(item, value));\r",
									"    } else {\r",
									"        return obj === value;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"6. Gautame atsakyme nėra apklausos kūrėją identifikuojančio 'adminId' arba 'AdminName'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let adminName = pm.environment.get(\"AdminName\");\r",
									"    \r",
									"    pm.expect(checkForValue(responseData, adminId)).to.be.false;\r",
									"    pm.expect(checkForValue(responseData, adminName)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed +! bad token +new (public) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"Survey found\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\");\r",
									"});\r",
									"// Patikrina, ar gautame atsakyme yra visa reikalinga informacija jos atvaizdavimui ir ar ji tinkama.\r",
									"pm.test(\"5. Gautame atsakyme '_id' atitinka 'newEmbeddableSurveyId', apklausos būsena yra 'new' ir pateikiamavisa reikalinga informacija, apklausos atvaizdavimui.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    \r",
									"    // Patikrina, ar yra visi reikalingi raktai ir jie nėra tušti\r",
									"    pm.expect(surveyData).to.have.keys(\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"state\",\r",
									"        \"questions\",\r",
									"        \"isEmbeddable\"\r",
									"    );\r",
									"    pm.expect(surveyData._id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.state).to.be.eql('new'); \r",
									"    pm.expect(surveyData.questions).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.isEmbeddable).to.be.a('boolean');\r",
									"\r",
									"    // Patikrina, ar _id atitinka globalų kintamąjį 'newEmbeddableSurveyId'\r",
									"    pm.expect(surveyData._id).to.eql(pm.globals.get(\"newEmbeddableSurveyId\"));\r",
									"});\r",
									"\r",
									"// Patikrina, ar atsakyme nėra adminId:\r",
									"function checkForValue(obj, value) {\r",
									"    if (Array.isArray(obj)) {\r",
									"        return obj.some(item => checkForValue(item, value));\r",
									"    } else if (typeof obj === 'object' && obj !== null) {\r",
									"        return Object.values(obj).some(item => checkForValue(item, value));\r",
									"    } else {\r",
									"        return obj === value;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"6. Gautame atsakyme nėra apklausos kūrėją identifikuojančio 'adminId' arba 'AdminName'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let adminName = pm.environment.get(\"AdminName\");\r",
									"    \r",
									"    pm.expect(checkForValue(responseData, adminId)).to.be.false;\r",
									"    pm.expect(checkForValue(responseData, adminName)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "badToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + (as admin) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas pranesimas kad respondentai pasalinti kiek repondentu liko ir kiek istryne\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Some listed respondents deleted' ir teisingai nurodomas ištrintų ir ignoruojamų resapondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents deleted\");\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(1)\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(5)\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"was not a respondent;\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"nuasmeninta4@stud.kitm.lt\",\r\n    \"nuasmeninta3@stud.kitm.lt\",\r\n    \"survery.user@kitm.lt\",\r\n    \"survery.teacher@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  + no respondents (as admin) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\", \"The response message should be 'Survey state updated to active'.\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed +! no token +active (public) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"Survey found\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\");\r",
									"});\r",
									"// Patikrina, ar gautame atsakyme yra visa reikalinga informacija jos atvaizdavimui ir ar ji tinkama.\r",
									"pm.test(\"5. Gautame atsakyme '_id' atitinka 'newEmbeddableSurveyId', apklausos būsena yra 'active' ir pateikiamavisa reikalinga informacija, apklausos atvaizdavimui.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    \r",
									"    // Patikrina, ar yra visi reikalingi raktai ir jie nėra tušti\r",
									"    pm.expect(surveyData).to.have.keys(\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"state\",\r",
									"        \"questions\",\r",
									"        \"isEmbeddable\"\r",
									"    );\r",
									"    pm.expect(surveyData._id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.state).to.be.eql('active'); \r",
									"    pm.expect(surveyData.questions).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.isEmbeddable).to.be.a('boolean');\r",
									"\r",
									"    // Patikrina, ar _id atitinka globalų kintamąjį 'newEmbeddableSurveyId'\r",
									"    pm.expect(surveyData._id).to.eql(pm.globals.get(\"newEmbeddableSurveyId\"));\r",
									"});\r",
									"\r",
									"// Patikrina, ar atsakyme nėra adminId:\r",
									"function checkForValue(obj, value) {\r",
									"    if (Array.isArray(obj)) {\r",
									"        return obj.some(item => checkForValue(item, value));\r",
									"    } else if (typeof obj === 'object' && obj !== null) {\r",
									"        return Object.values(obj).some(item => checkForValue(item, value));\r",
									"    } else {\r",
									"        return obj === value;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"6. Gautame atsakyme nėra apklausos kūrėją identifikuojančio 'adminId' arba 'AdminName'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let adminName = pm.environment.get(\"AdminName\");\r",
									"    \r",
									"    pm.expect(checkForValue(responseData, adminId)).to.be.false;\r",
									"    pm.expect(checkForValue(responseData, adminName)).to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  + not a respondent+active (as admin) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - no token (as admin) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - bad token (as admin) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "badToken",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> {{newEmbeddableSurveyId}}+ (as admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\",\r\n    \"{{EmplElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent - active (as admin) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - already answered (as admin) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 409 'Conflict'.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Answer to survey already submitted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer to survey already submitted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  + as a respondent+active (as empl) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Employee}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    4,  // \"Labai blogai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    3,  // \"Testavimo procesų optimizavimas\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [1, 3],  // Pasirinkimai \"Saugumo testavimas\", \"API testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    1,  // \"Dažniausiai\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [1, 4],  // Pasirinkimai \"Pavyzdžių rinkinius\", \"Išsamias instrukcijas\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    1,  // \"Aukšta\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Trūksta aiškesnių paaiškinimų ir praktinio taikymo.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Reikėtų dažniau atnaujinti kursų medžiagą atsižvelgiant į naujausias industrijos tendencijas.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Ne, manau, kad kursai galėtų būti geriau suderinti su praktiniais darbo reikalavimais.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close +  (as admin) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\", \"The survey state should be 'closed'.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - closed (as empl) {{newEmbeddableSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"failed\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Action was not allowed for this survey due to its state'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Action was not allowed for this survey due to its state\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Employee}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    4,  // \"Labai blogai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    3,  // \"Testavimo procesų optimizavimas\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [1, 3],  // Pasirinkimai \"Saugumo testavimas\", \"API testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    1,  // \"Dažniausiai\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [1, 4],  // Pasirinkimai \"Pavyzdžių rinkinius\", \"Išsamias instrukcijas\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    1,  // \"Aukšta\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Trūksta aiškesnių paaiškinimų ir praktinio taikymo.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Reikėtų dažniau atnaujinti kursų medžiagą atsižvelgiant į naujausias industrijos tendencijas.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Ne, manau, kad kursai galėtų būti geriau suderinti su praktiniais darbo reikalavimais.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed + closed (as admin) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"Survey found\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\");\r",
									"});\r",
									"// Patikrina, ar gautame atsakyme yra visa reikalinga informacija jos atvaizdavimui ir ar ji tinkama.\r",
									"pm.test(\"5. Gautame atsakyme '_id' atitinka 'newEmbeddableSurveyId', apklausos būsena yra 'closed' ir pateikiamavisa reikalinga informacija, apklausos atvaizdavimui.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    \r",
									"    // Patikrina, ar yra visi reikalingi raktai ir jie nėra tušti\r",
									"    pm.expect(surveyData).to.have.keys(\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"state\",\r",
									"        \"questions\",\r",
									"        \"isEmbeddable\"\r",
									"    );\r",
									"    pm.expect(surveyData._id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.state).to.be.eql('closed');\r",
									"    pm.expect(surveyData.questions).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.isEmbeddable).to.be.a('boolean');\r",
									"\r",
									"    // Patikrina, ar _id atitinka globalų kintamąjį 'newEmbeddableSurveyId'\r",
									"    pm.expect(surveyData._id).to.eql(pm.globals.get(\"newEmbeddableSurveyId\"));\r",
									"});\r",
									"\r",
									"// Patikrina, ar atsakyme nėra adminId:\r",
									"function checkForValue(obj, value) {\r",
									"    if (Array.isArray(obj)) {\r",
									"        return obj.some(item => checkForValue(item, value));\r",
									"    } else if (typeof obj === 'object' && obj !== null) {\r",
									"        return Object.values(obj).some(item => checkForValue(item, value));\r",
									"    } else {\r",
									"        return obj === value;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"6. Gautame atsakyme nėra apklausos kūrėją identifikuojančio 'adminId' arba 'AdminName'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let adminName = pm.environment.get(\"AdminName\");\r",
									"    \r",
									"    pm.expect(checkForValue(responseData, adminId)).to.be.false;\r",
									"    pm.expect(checkForValue(responseData, adminName)).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/embed + closed (public) {{newEmbeddableSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"Survey found\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'Survey found'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey found\");\r",
									"});\r",
									"// Patikrina, ar gautame atsakyme yra visa reikalinga informacija jos atvaizdavimui ir ar ji tinkama.\r",
									"pm.test(\"5. Gautame atsakyme '_id' atitinka 'newEmbeddableSurveyId', apklausos būsena yra 'closed' ir pateikiamavisa reikalinga informacija, apklausos atvaizdavimui.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let surveyData = responseData.data.surveyData;\r",
									"    \r",
									"    // Patikrina, ar yra visi reikalingi raktai ir jie nėra tušti\r",
									"    pm.expect(surveyData).to.have.keys(\r",
									"        \"_id\",\r",
									"        \"name\",\r",
									"        \"state\",\r",
									"        \"questions\",\r",
									"        \"isEmbeddable\"\r",
									"    );\r",
									"    pm.expect(surveyData._id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.state).to.be.eql('closed');\r",
									"    pm.expect(surveyData.questions).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(surveyData.isEmbeddable).to.be.a('boolean');\r",
									"\r",
									"    // Patikrina, ar _id atitinka globalų kintamąjį 'newEmbeddableSurveyId'\r",
									"    pm.expect(surveyData._id).to.eql(pm.globals.get(\"newEmbeddableSurveyId\"));\r",
									"});\r",
									"\r",
									"// Patikrina, ar atsakyme nėra adminId:\r",
									"function checkForValue(obj, value) {\r",
									"    if (Array.isArray(obj)) {\r",
									"        return obj.some(item => checkForValue(item, value));\r",
									"    } else if (typeof obj === 'object' && obj !== null) {\r",
									"        return Object.values(obj).some(item => checkForValue(item, value));\r",
									"    } else {\r",
									"        return obj === value;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"6. Gautame atsakyme nėra apklausos kūrėją identifikuojančio 'adminId' arba 'AdminName'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let adminId = pm.globals.get(\"adminId\");\r",
									"    let adminName = pm.environment.get(\"AdminName\");\r",
									"    \r",
									"    pm.expect(checkForValue(responseData, adminId)).to.be.false;\r",
									"    pm.expect(checkForValue(responseData, adminName)).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/embed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"embed"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Embeddable survey - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE embeddable survey --> {{newEmbeddableSurveyId2}}+C (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"5. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra true).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.true;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"6. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newEmbeddableSurveyId2'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newEmbeddableSurveyId2 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newEmbeddableSurveyId2\", newEmbeddableSurveyId2);\r",
									"    console.log(\"New survey ID saved to globals:\", newEmbeddableSurveyId2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"true\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + {{newEmbeddableSurveyId2}} (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish  + respondents (as empl) {{newEmbeddableSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\", \"The response message should be 'Survey state updated to active'.\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + {{newEmbeddableSurveyId2}} (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.addedCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"survery.user@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  + not a respondent+active (as admin) {{newEmbeddableSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,\r\n    1,\r\n    [0, 2, 4],\r\n    3,\r\n    [0, 3],\r\n    4,\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",\r\n    0,\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE embeddable survey --> {{newEmbeddableSurveyId3}}+ (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Patikrina, ar apklausa yra įterpiama:\r",
									"pm.test(\"5. Patikrinama, ar apklausa yra įterpiama ('isEmbeddable' yra true).\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.isEmbeddable).to.be.true;\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"6. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newEmbeddableSurveyId3'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newEmbeddableSurveyId3 = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newEmbeddableSurveyId3\", newEmbeddableSurveyId3);\r",
									"    console.log(\"New survey ID saved to globals:\", newEmbeddableSurveyId3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"true\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + {{newEmbeddableSurveyId3}} (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'All listed respondents added' ir tinkamas pridėtų respondnetų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"All listed respondents added\");\r",
									"    pm.expect(responseData.data.currentCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdditionalUserElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent + (as admin) {{newEmbeddableSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Gaunamas pranesimas kad respondentai pasalinti kiek repondentu liko ir kiek istryne\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Some listed respondents deleted' ir teisingai nurodomas ištrintų ir ignoruojamų resapondentų kiekis.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Some listed respondents deleted\");\r",
									"    pm.expect(responseData.data.deletedCount).to.eql(1)\r",
									"    pm.expect(responseData.data.ignoredCount).to.eql(5)\r",
									"    pm.expect(responseData.data.warrningMessage).to.include(\"was not a respondent;\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"nuasmeninta1@stud.kitm.lt\",\r\n    \"{{AdditionalUserElP}}\",\r\n    \"nuasmeninta3@stud.kitm.lt\",\r\n    \"nuasmeninta4@stud.kitm.lt\",\r\n    \"survery.user@kitm.lt\",\r\n    \"survery.teacher@kitm.lt\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/publish + no respondents {{newEmbeddableSurveyId3}} (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\", \"The response message should be 'Survey state updated to active'.\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"active\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'active'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"active\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/publish",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"publish"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close + no respondents-answers {{newEmbeddableSurveyId3}} (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrinama, ar pranešimo laukas yra \"Survey state has been updated\":\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Survey state has been updated'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey state has been updated\", \"The response message should be 'Survey state updated to active'.\");\r",
									"});\r",
									"// Patikrinama, ar apklausos būsena yra nustatyta į \"closed\":\r",
									"pm.test(\"5. Apklausos būsena atnaujinta į 'closed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.updatedSurvey.state).to.eql(\"closed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE survey --> {{newSurveyId8}}+C (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"5. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId8'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId8\", newSurveyId);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE embeddable survey -! (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"true\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate bendrą kursų organizavimą?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikiai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kuri kursų tema buvo naudingiausia?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Testavimo metodologijos\", \"Automatizavimo įrankiai\", \"Defektų valdymas\", \"Testavimo procesų optimizavimas\", \"Komandinis darbas\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias kursų temas norėtumėte gilinti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Automatizavimas\", \"Saugumo testavimas\", \"Našumo testavimas\", \"API testavimas\", \"Mobiliojo testavimas\"]\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo aiški ir suprantama?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada\", \"Dažniausiai\", \"Kartais\", \"Retkarčiais\", \"Niekada\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokias papildomas medžiagas norėtumėte gauti?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Video pamokas\", \"Pavyzdžių rinkinius\", \"Užduočių sąsiuvinius\", \"Testų scenarijus\", \"Išsamias instrukcijas\"]\r\n        },\r\n        {\r\n            \"label\": \"Įvertinkite dėstytojo kompetenciją\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai aukšta\", \"Aukšta\", \"Patenkinama\", \"Nepakankama\", \"Nepriimtina\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius trūkumus pastebėjote dėstytojo darbe?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigiant kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų gerinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  + not a respondent+active (as user) {{newEmbeddableSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Gaunamas geras pranesimas kad respondentai prideti\r",
									"pm.test(\"4. Gaunamas tinkamas pranešimas 'Answer Created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer Created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/fill  - already answered (as admin) {{newEmbeddableSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 409 'Conflict'.\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Answer to survey already submitted'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Answer to survey already submitted\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"answers\": [\r\n    2,  // \"Vidutiniškai\" atsakymas į klausimą \"Kaip vertinate bendrą kursų organizavimą?\"\r\n    1,  // \"Automatizavimo įrankiai\" atsakymas į klausimą \"Kuri kursų tema buvo naudingiausia?\"\r\n    [0, 2, 4],  // Pasirinkimai \"Automatizavimas\", \"Našumo testavimas\", \"Mobiliojo testavimas\" į klausimą \"Kokias kursų temas norėtumėte gilinti?\"\r\n    3,  // \"Retkarčiais\" atsakymas į klausimą \"Ar kursų medžiaga buvo aiški ir suprantama?\"\r\n    [0, 3],  // Pasirinkimai \"Video pamokas\", \"Testų scenarijus\" į klausimą \"Kokias papildomas medžiagas norėtumėte gauti?\"\r\n    4,  // \"Nepriimtina\" atsakymas į klausimą \"Įvertinkite dėstytojo kompetenciją\"\r\n    \"Dėstytojas dažnai vėluoja ir nesilaiko planuotos medžiagos.\",  // Atsakymas į klausimą \"Kokius trūkumus pastebėjote dėstytojo darbe?\"\r\n    0,  // \"Labai gerai\" atsakymas į klausimą \"Kaip vertinate savo pasiekimus baigiant kursus?\"\r\n    \"Siūlyčiau daugiau praktinių užsiėmimų ir mažiau teorijos.\",  // Atsakymas į klausimą \"Jūsų pasiūlymai kursų gerinimui\"\r\n    \"Taip, kursai buvo naudingi ir gerai organizuoti.\"  // Atsakymas į klausimą \"Ar rekomenduotumėte šiuos kursus kitiems?\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/fill",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"fill"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD respondents --> -! {{newEmbeddableSurveyId2}}+ (as user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/respondent -! active (as user) {{newEmbeddableSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"respondents\": [\r\n    \"{{AdminElP}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/respondent",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"respondent"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/close -!  (as user) {{newEmbeddableSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"close"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get survey answers JSON  - admin",
			"item": [
				{
					"name": "surveys/:surveyID/export + new (as admin) {{newSurveyId8}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId8}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + other user's survey +active+answers (as admin){{newEmbeddableSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + closed+answers (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! no token +new (public) {{newSurveyId8}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId8}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! no token active+answers (public) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 1 ir 'submittedAnswers' masyve yra 1 atsakymas.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(1);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(1);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžintas vieno respondento atsakymas ir jo elektroninis paštas yra'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! no token active-answers (public) {{newSurveyId6}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! no token +closed-answers (public) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! no token +closed+answers (public) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export +! bad token +closed+answers {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "badToken",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad ID (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - invalid ID (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found'.\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Item with specific id was not found.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.include(\"Item with specific id was not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "000000000000000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - too long (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "66353aaebc8b43eadcbb5acaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - special MongoDB value ID (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "$oid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - ID # (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "#"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - ID % (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "%"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - ID ? (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "?"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - ID / (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 404 'Not Found' arba 400 'Bad Request'.\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404, 400]);\r",
									"});\r",
									"//Tinkamas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Klaidos statuso patikrinimas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid ID format.'.\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data.message).to.eql(\"Invalid ID format.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - invalid JSON format (public) !!!",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Geras klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Invalid JSON format'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.include(\"Invalid JSON format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\",\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad type bool (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Export key is incorrect'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad type int (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Please provide desired role'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad type object (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Export key is incorrect'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"exportKey\": [\"teisingas\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad type empty (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Export key is incorrect'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"exportKey\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - {} (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Export key is incorrect'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export - bad key (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Tinkamas klaidos pranešimas:\r",
									"pm.test(\"4. Gaunamas teisingas klaidos pranešimas 'Export key is incorrect'.\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Export key is incorrect\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"exportKeys\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Get survey answers JSON  - other roles",
			"item": [
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + new (as empl) {{newSurveyId8}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId8}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + active-answers (as empl) {{newSurveyId6}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'No survey answers found'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"No survey answers found\");\r",
									"});\r",
									"// Testas, kad patikrinti \"answerCount\" yra 0 ir \"submittedAnswers\" yra tuščias masyvas\r",
									"pm.test(\"5. 'answerCount' yra 0 ir 'submittedAnswers' yra tuščias masyvas.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.surveyData.answerCount).to.eql(0);\r",
									"    pm.expect(responseData.data.surveyData.submittedAnswers).to.be.an('array').that.is.empty;\r",
									"});\r",
									"// Testas, kuris tikrina, ar grąžintame atsakyme yra visi reikalingi raktai ir jų struktūra atitinka reikalavimus\r",
									"pm.test(\"6. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData).to.have.property('creator');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('questions');\r",
									"    pm.expect(responseData.questions).to.be.an('array').that.is.not.empty;\r",
									"    responseData.questions.forEach(question => {\r",
									"        pm.expect(question).to.have.property('label');\r",
									"        pm.expect(question).to.have.property('type');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"        if (question.type === \"text\" || question.type === \"textarea\") {\r",
									"            pm.expect(question.options).to.eql([]);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + other user's survey +closed+answers (as empl) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID/export + other user's survey +closed+answers (as user) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Pranešimo lauko patikrinimas\r",
									"pm.test(\"4. Gautas tinkamas pranešimas 'Survey export data received'.\", function () {\r",
									"    let responseData = pm.response.json().data;\r",
									"    pm.expect(responseData.message).to.include(\"Survey export data received\");\r",
									"});\r",
									"//Patikrinti, kad \"answerCount\" = 2 ir \"submittedAnswers\" masyve yra 2 atsakymai.\r",
									"pm.test(\"5. 'answerCount' = 2 ir 'submittedAnswers' masyve yra 2 atsakymai.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData;\r",
									"    pm.expect(responseData.answerCount).to.eql(2);\r",
									"    pm.expect(responseData.submittedAnswers).to.have.lengthOf(2);\r",
									"});\r",
									"//Patikrinti, kad vienas iš respondentų yra lygus kolekcijos kintamajam AdminElP, o kitas EmplElP.\r",
									"pm.test(\"6. Grąžinti abiejų respondentų atsakymai ir jų elektroniniai paštai yra 'AdminElP' ir 'EmplElP'.\", function () {\r",
									"    let responseData = pm.response.json().data.surveyData.submittedAnswers;\r",
									"    let emails = responseData.map(a => a.respondent);\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"AdminElP\"));\r",
									"    pm.expect(emails).to.include(pm.variables.get(\"EmplElP\"));\r",
									"});\r",
									"//Patikrinti visus reikalingus raktus ir struktūrą:\r",
									"pm.test(\"7. Grąžintame atsakyme yra visi reikalingi raktai ir duomenų struktūra atitinka reikalavimus.\", function () {\r",
									"    let data = pm.response.json().data.surveyData;\r",
									"    // Patikrinti ar yra pagrindiniai raktai\r",
									"    pm.expect(data).to.have.keys(['name', 'creator', 'createdAt', 'questions', 'answerCount', 'submittedAnswers']);\r",
									"    pm.expect(data.creator).to.be.a('string');\r",
									"    pm.expect(data.name).to.be.a('string');\r",
									"    // Patikrinti klausimus\r",
									"    pm.expect(data.questions).to.be.an('array').that.is.not.empty;\r",
									"    data.questions.forEach(question => {\r",
									"        pm.expect(question).to.include.keys('label', 'type');  // Patikrinama, kad yra label ir type\r",
									"        pm.expect(question.label).to.be.a('string');\r",
									"        pm.expect(question.type).to.be.oneOf([\"radio\", \"checkbox\", \"text\", \"textarea\"]);\r",
									"        // Jei tipas yra radio ar checkbox, turi būti options masyvas\r",
									"        if (question.type === \"radio\" || question.type === \"checkbox\") {\r",
									"            pm.expect(question).to.have.property('options').that.is.an('array').that.is.not.empty;\r",
									"        }\r",
									"    });\r",
									"    // Patikrinti atsakymus\r",
									"    pm.expect(data.submittedAnswers).to.be.an('array');\r",
									"    data.submittedAnswers.forEach(answer => {\r",
									"        pm.expect(answer).to.include.keys('respondent', 'createdAt', 'answer');\r",
									"        pm.expect(answer.respondent).to.be.a('string');\r",
									"        pm.expect(answer.createdAt).to.be.a('string');\r",
									"        pm.expect(answer.answer).to.be.an('array').that.satisfies(arr => arr.every(item => typeof item === 'string' || Array.isArray(item)));\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"exportKey\": \"teisingas\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID",
								"export"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "Delete the survey - other roles NEW",
			"item": [
				{
					"name": "role --> user (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'user'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"user\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID -! (as user) {{newSurveyId3}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'You do not have permission to this action'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql(\"You do not have permission to this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "role --> employee (by admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Tinkama rolė:\r",
									"pm.test(\"4. Atsakymo duomenyse matomas rolės atnaujinimas į 'employee'.\", function () {\r",
									"    let responseData = pm.response.json().data.user;\r",
									"    pm.expect(responseData.role).to.eql(\"employee\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token-Admin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\":\"employee\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/:id/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								":id",
								"role"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{employeeId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + active+answers (as empl) {{newEmbeddableSurveyId2}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey has answers, so this action cannot be performed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has answers, so this action cannot be performed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + closed-respondents-answers (as empl) {{newEmbeddableSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newEmbeddableSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + closed-answers (as empl) {{newSurveyId3}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  -! other user's survey (as empl) {{newSurveyId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 403 'Forbidden'.\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'User does not have permission to access this survey'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"User does not have permission to access this survey\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + new (as empl) {{newSurveyId8}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId8}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE survey --> {{newSurveyId9}}+C (as empl)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 201 'Created'.\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//Priimtinas atsakymo laikas: \r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"// Patikrina, ar pranešimas yra \"New survey created\":\r",
									"pm.test(\"4. Gaunamas tinkamas atsakymo pranešimas 'New survey created'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"New survey created\");\r",
									"});\r",
									"// Išsaugo naujos apklausos ID į globalius kintamuosius, kad galėtume jį panaudoti apklausos koregavimui:\r",
									"pm.test(\"5. Sukurtos apklausos ID išsaugomas kaip globalus kintamasis 'newSurveyId9'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    let newSurveyId = responseData.data.surveyData._id;\r",
									"    pm.globals.set(\"newSurveyId9\", newSurveyId);\r",
									"    console.log(\"New survey ID saved to globals:\", newSurveyId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"JavaScript kursų atsiliepimų apklausa\",\r\n    \"isEmbeddable\": \"false\",\r\n    \"questions\": [\r\n        {\r\n            \"label\": \"Kaip vertinate kursų turinio atitikimą jūsų lūkesčiams?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visiškai atitiko\", \"Daugiausia atitiko\", \"Iš dalies atitiko\", \"Mažai atitiko\", \"Visiškai neatitiko\"]\r\n        },\r\n        {\r\n            \"label\": \"Kurios JavaScript temos jums buvo labiausiai naudingos?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"DOM manipuliavimas\", \"Event Handling\", \"Asinchroninis programavimas\", \"JavaScript ES6+\", \"Node.js\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius iššūkius susidūrėte mokantis JavaScript?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar kursų medžiaga buvo pateikta aiškiai ir suprantamai?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Visada aiškiai\", \"Daugiausia aiškiai\", \"Kartais aiškiai\", \"Retkarčiais aiškiai\", \"Niekada aiškiai\"]\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate dėstytojo palaikymą ir pagalbą kursų metu?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Puikus palaikymas\", \"Geras palaikymas\", \"Vidutinis palaikymas\", \"Nepakankamas palaikymas\", \"Jokio palaikymo\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokių papildomų išteklių norėtumėte kursų metu?\",\r\n            \"type\": \"checkbox\",\r\n            \"options\": [\"Daugiau praktinių užduočių\", \"Video medžiaga\", \"Interaktyvios užduotys\", \"Pavyzdžių projektai\", \"Live coding sesijos\"]\r\n        },\r\n        {\r\n            \"label\": \"Kokius aspektus kursuose vertinate kaip silpniausius?\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Kaip vertinate savo pasiekimus baigus kursus?\",\r\n            \"type\": \"radio\",\r\n            \"options\": [\"Labai gerai\", \"Gerai\", \"Vidutiniškai\", \"Blogai\", \"Labai blogai\"]\r\n        },\r\n        {\r\n            \"label\": \"Jūsų pasiūlymai kursų tobulinimui\",\r\n            \"type\": \"textarea\",\r\n            \"options\": []\r\n        },\r\n        {\r\n            \"label\": \"Ar rekomenduotumėte šiuos JavaScript kursus kitiems?\",\r\n            \"type\": \"text\",\r\n            \"options\": []\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/surveys",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Employee}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete the survey - admin NEW",
			"item": [
				{
					"name": "surveys/:surveyID  + other user's survey+new (as admin) {{newSurveyId9}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId9}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + active-answers (as admin) {{newSurveyId6}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  - active+answered (as admin) {{newSurveyId5}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey has answers, so this action cannot be performed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has answers, so this action cannot be performed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  + closed-answers (as admin) {{newSurveyId}}+",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 200 'OK'.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'success'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"success\");\r",
									"});\r",
									"//Grąžinama žinutė tinkamai nurodo ištrintos apklausos ID.\r",
									"pm.test(\"4. Grąžinama tinkama žinutė 'Survey has been deleted successfully'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has been deleted successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  - closed+answered (as admin) {{newSurveyId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras status kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 400 'Bad Request'.\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // Laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Survey has answers, so this action cannot be performed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Survey has answers, so this action cannot be performed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  - bad token {{newSurveyId9}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Token is invalid'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Token is invalid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "BadToken",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId9}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "surveys/:surveyID  - no token (public) {{newSurveyId9}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Geras statuso kodas:\r",
									"pm.test(\"1. Serverio atsako statuso kodas yra 401 'Unauthorized'.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"//Priimtinas atsakymo laikas:\r",
									"pm.test(\"2. Atsakymo laikas yra trumpesnis nei 500ms.\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500); // laikas milisekundėmis\r",
									"});\r",
									"//Geras atsakymo statusas:\r",
									"pm.test(\"3. Gaunama 'status' rakto reikšmė yra 'failed'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    // Patikrinama, ar statusas yra \"success\"\r",
									"    pm.expect(responseData.status.toLowerCase()).to.eql(\"failed\");\r",
									"});\r",
									"//Klaidos pranešimo tikrinimas:\r",
									"pm.test(\"4. Gaunamas tinkamas klaidos pranešimas 'Bearer token is missing'.\", function () {\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData.data.message).to.eql(\"Bearer token is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/surveys/:surveyID",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"surveys",
								":surveyID"
							],
							"variable": [
								{
									"key": "surveyID",
									"value": "{{newSurveyId9}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token-Admin}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000"
		},
		{
			"key": "Token-Admin",
			"value": "token"
		},
		{
			"key": "AdminName",
			"value": "name",
			"type": "string"
		},
		{
			"key": "AdminElP",
			"value": "email",
			"type": "string"
		},
		{
			"key": "Token-Employee",
			"value": "token",
			"type": "string"
		},
		{
			"key": "EmployeeName",
			"value": "name",
			"type": "string"
		},
		{
			"key": "EmplElP",
			"value": "email",
			"type": "string"
		},
		{
			"key": "AdditionalUserElP",
			"value": "email",
			"type": "string"
		},
		{
			"key": "AdditionalUserName",
			"value": "name",
			"type": "string"
		}
	]
}